<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝辞</title>
  
  <subtitle>Have a nice day!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-24T03:28:57.175Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhaoci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-41 First Missing Positive</title>
    <link href="http://yoursite.com/2020/07/24/2020-07-24-LeetCode-41-First%20Missing%20Positive/"/>
    <id>http://yoursite.com/2020/07/24/2020-07-24-LeetCode-41-First%20Missing%20Positive/</id>
    <published>2020-07-24T03:28:00.000Z</published>
    <updated>2020-07-24T03:28:57.175Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个未排序的整数数组，请你找出其中没有出现的最小的正整数。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,2,0]</span></span><br><span class="line"><span class="comment">//输出: 3</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [3,4,-1,1]</span></span><br><span class="line"><span class="comment">//输出: 2</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 3: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [7,8,9,11,12]</span></span><br><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 提示： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的算法的时间复杂度应为O(n)，并且只能使用常数级别的额外空间。 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 </span></span><br><span class="line"><span class="comment">// 👍 682 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstMissingPositive</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> FirstMissingPositive().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.firstMissingPositive(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">1</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果本题无额外的时空复杂度要求，则易于实现：</span></span><br><span class="line"><span class="comment">     * - 我们可以将数组所有的数放入哈希表，随后从1开始依次枚举正整数，并判断其是否在哈希表中；</span></span><br><span class="line"><span class="comment">     * - 我们也可以从1开始依次枚举正整数，并遍历数组，判断其是否在数组中。</span></span><br><span class="line"><span class="comment">     * 若数组长度为N，第一种做法的时间复杂度为O(N),空间复杂度为O(N).第二种做法的时间复杂度为O(N^2),空间复杂度为O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以退而求其次，利用给定数组中的空间来存储一些状态。如果题目给定的数组是不可修改的，那么就不存在满足时空复杂度</span></span><br><span class="line"><span class="comment">     * 要求的算法了。但如果可以修改给定的数组，那么是存在满足要求的算法的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Solution：哈希表</span></span><br><span class="line"><span class="comment">     * T: O(N)  S:O(1)</span></span><br><span class="line"><span class="comment">     * 思路：考虑将给定的数组设计为哈希表的「替代产品」。实际上，对于一个长度为N的数组，其中没有出现的最小正整数只能在[1,N+1]中，</span></span><br><span class="line"><span class="comment">     * 因为，如果[1,N]都出现了，那么答案是N+1。否则答案是[1,N]中没有出现的最小正整数。因此，我们将所有在[1,N]范围内的数放入哈希</span></span><br><span class="line"><span class="comment">     * 表中，也可以得到最终答案。而给定的数组长度恰好为N，因此可以数组设计成哈希表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 对数组进行遍历，对于遍历到的数x， 如果它在[1,N]的范围内，那么就将数组中的第x-1个位置(数组下标从0开始)打上标记。遍历结束</span></span><br><span class="line"><span class="comment">     * 后，如果所有位置都被打上了标记，那么答案就是N+1。否则答案是最小的没有被打上标记的位置加1。</span></span><br><span class="line"><span class="comment">     * 2. 如何设计该「标记」。由于只在意[1,N]中的数，因此把不在[1,N]范围内的数修改成任意一个大于N的数(如N+1)。这样一来，数组中的</span></span><br><span class="line"><span class="comment">     * 所有数就都是正数了，因此我们可以将「标记」表示为「负号」。</span></span><br><span class="line"><span class="comment">     *  - 将数组中所有小于等于0的数修改为N+1；</span></span><br><span class="line"><span class="comment">     *  - 遍历数组中的每一个数x，它可能已经被打了标记(负号)，因此原本对应的数为|x|，如果|x|∈[1,N]，那么给数组中的第|x|-1个位置</span></span><br><span class="line"><span class="comment">     *  的数添加一个负号。如果它已经有负号，则不需要重复添加。</span></span><br><span class="line"><span class="comment">     *  - 遍历完成后，如果数组中所有数都是负数，那么答案就是N+1，否则答案是第一个正数(未打标记)的位置加1。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  E.g.  n=6</span></span><br><span class="line"><span class="comment">     *   3  4  -1   1  9  -5</span></span><br><span class="line"><span class="comment">     *   3  4   7   1  9   7    将所有负数变为n+1.</span></span><br><span class="line"><span class="comment">     *  -3  4  -7  -1  9   7    做标记.  (4对应的下标为1，即1+1=2为所缺失的最小正整数)</span></span><br><span class="line"><span class="comment">     *  [0][1] [2] [3][4] [5]</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &lt;= <span class="number">0</span>)</span><br><span class="line">                    nums[i] = n + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> num = Math.abs(nums[i]);</span><br><span class="line">                <span class="keyword">if</span>(num&lt;=n)</span><br><span class="line">                    nums[num-<span class="number">1</span>] = -Math.abs(nums[num-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-40 Combination Sumli</title>
    <link href="http://yoursite.com/2020/07/24/2020-07-24-LeetCode-40-Combination%20Sumli/"/>
    <id>http://yoursite.com/2020/07/24/2020-07-24-LeetCode-40-Combination%20Sumli/</id>
    <published>2020-07-24T02:25:00.000Z</published>
    <updated>2020-07-24T02:28:56.209Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// candidates 中的每个数字在每个组合中只能使用一次。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 所有数字（包括目标数）都是正整数。 </span></span><br><span class="line"><span class="comment">// 解集不能包含重复的组合。 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: candidates = [10,1,2,7,6,1,5], target = 8,</span></span><br><span class="line"><span class="comment">//所求解集为:</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [1, 7],</span></span><br><span class="line"><span class="comment">//  [1, 2, 5],</span></span><br><span class="line"><span class="comment">//  [2, 6],</span></span><br><span class="line"><span class="comment">//  [1, 1, 6]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: candidates = [2,5,2,1,2], target = 5,</span></span><br><span class="line"><span class="comment">//所求解集为:</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [1,2,2],</span></span><br><span class="line"><span class="comment">//  [5]</span></span><br><span class="line"><span class="comment">//] </span></span><br><span class="line"><span class="comment">// Related Topics 数组 回溯算法 </span></span><br><span class="line"><span class="comment">// 👍 314 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSumIi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> CombinationSumIi().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.combinationSum2(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>&#125;, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution</span></span><br><span class="line"><span class="comment">     * 与"组合总和"相比，所要解决的问题是：让同一层级不出现相同的元素，但是允许不同层级之间的重复</span></span><br><span class="line"><span class="comment">     * 如:[1,1,2,5,6,7,10]</span></span><br><span class="line"><span class="comment">     * 允许出现[1,1,6]，但是不允许出现[1,2,5]和[1,2,5].</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(candidates == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            Arrays.sort(candidates);</span><br><span class="line">            dfs(target, <span class="number">0</span>, <span class="keyword">new</span> Stack&lt;Integer&gt;(), candidates);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> index, Stack&lt;Integer&gt; pre, <span class="keyword">int</span>[] candidates)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(pre));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * "组合总和"中代码</span></span><br><span class="line"><span class="comment">            for(int i=index; i&lt;candidates.length; i++)&#123;</span></span><br><span class="line"><span class="comment">                // 如果减数大于目标值，则差为负数，不符合结果</span></span><br><span class="line"><span class="comment">                if(candidates[i]&lt;=target)&#123;</span></span><br><span class="line"><span class="comment">                    pre.push(candidates[i]);</span></span><br><span class="line"><span class="comment">                    // 目标值减去元素值</span></span><br><span class="line"><span class="comment">                    dfs(target-candidates[i], i, pre, candidates);</span></span><br><span class="line"><span class="comment">                    // 每次回溯将最后一次加入的元素删除</span></span><br><span class="line"><span class="comment">                    pre.pop();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;candidates.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 防止出现重复情况  如[1,1,2,5,6,7,10]</span></span><br><span class="line">                <span class="comment">// 可以出现[1,1,6]，但是不允许出现[1(第一个1),2,5] [1(第二个1),2,5]两次</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;index &amp;&amp; candidates[i-<span class="number">1</span>]==candidates[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(candidates[i]&lt;=target) &#123;</span><br><span class="line">                    pre.push(candidates[i]);</span><br><span class="line">                    <span class="comment">// 深度遍历时，index+1, 因为不可使用重复元素</span></span><br><span class="line">                    dfs(target - candidates[i], i + <span class="number">1</span>, pre, candidates);</span><br><span class="line">                    pre.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="回溯算法" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-39 Combination Sum</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23-LeetCode-39-Combination-Sum/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23-LeetCode-39-Combination-Sum/</id>
    <published>2020-07-23T15:09:00.000Z</published>
    <updated>2020-07-24T01:25:12.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>回溯思路如下：</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh1sqlkhj1j31400u01kz.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// candidates 中的数字可以无限制重复被选取。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 所有数字（包括 target）都是正整数。 </span></span><br><span class="line"><span class="comment">// 解集不能包含重复的组合。 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：candidates = [2,3,6,7], target = 7,</span></span><br><span class="line"><span class="comment">//所求解集为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [7],</span></span><br><span class="line"><span class="comment">//  [2,2,3]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：candidates = [2,3,5], target = 8,</span></span><br><span class="line"><span class="comment">//所求解集为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [2,2,2,2],</span></span><br><span class="line"><span class="comment">//  [2,3,3],</span></span><br><span class="line"><span class="comment">//  [3,5]</span></span><br><span class="line"><span class="comment">//] </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 提示： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 &lt;= candidates.length &lt;= 30 </span></span><br><span class="line"><span class="comment">// 1 &lt;= candidates[i] &lt;= 200 </span></span><br><span class="line"><span class="comment">// candidate 中的每个元素都是独一无二的。 </span></span><br><span class="line"><span class="comment">// 1 &lt;= target &lt;= 500 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 回溯算法 </span></span><br><span class="line"><span class="comment">// 👍 768 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> CombinationSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.combinationSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 回溯算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * e.g. candidates = [2,3,6,7], target = 7.</span></span><br><span class="line"><span class="comment">     * 回溯思路： (每个节点代表: candidate[i](下一轮target))  如2(5).</span></span><br><span class="line"><span class="comment">     * -&gt; 2(5) -&gt; 2(3) -&gt; 2(2)</span></span><br><span class="line"><span class="comment">     *                 -&gt; 3(0) √</span></span><br><span class="line"><span class="comment">     *         -&gt; 3(2)</span></span><br><span class="line"><span class="comment">     * -&gt; 3(4)</span></span><br><span class="line"><span class="comment">     * -&gt; 6(1)</span></span><br><span class="line"><span class="comment">     * -&gt; 7(0) √</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(candidates == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            dfs(target, <span class="number">0</span>, <span class="keyword">new</span> Stack&lt;Integer&gt;(), candidates);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//深度遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> index, Stack&lt;Integer&gt; pre, <span class="keyword">int</span>[] candidates)</span></span>&#123;</span><br><span class="line">            <span class="comment">// 等于零说明结果符合要求</span></span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(pre));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历，index为本分支上一节点的减数的下标</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;candidates.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 如果减数大于目标值，则差为负数，不符合结果</span></span><br><span class="line">                <span class="keyword">if</span>(candidates[i]&lt;=target)&#123;</span><br><span class="line">                    pre.push(candidates[i]);</span><br><span class="line">                    <span class="comment">// 目标值减去元素值</span></span><br><span class="line">                    dfs(target-candidates[i], i, pre, candidates);</span><br><span class="line">                    <span class="comment">// 每次回溯将最后一次加入的元素删除</span></span><br><span class="line">                    pre.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;回溯思路如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gh1sqlkhj1j31400u01kz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="回溯算法" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-35 Search Insert Position</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23-LeetCode-35-Search-Insert-Position/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23-LeetCode-35-Search-Insert-Position/</id>
    <published>2020-07-22T18:11:00.000Z</published>
    <updated>2020-07-22T18:11:51.772Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设数组中无重复元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 5</span></span><br><span class="line"><span class="comment">//输出: 2</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 2</span></span><br><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 3: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 7</span></span><br><span class="line"><span class="comment">//输出: 4</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 4: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 0</span></span><br><span class="line"><span class="comment">//输出: 0</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 </span></span><br><span class="line"><span class="comment">// 👍 615 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInsertPosition</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> SearchInsertPosition().<span class="keyword">new</span> Solution();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>, right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-34 Find First And Last Position Of Element In Sorted Array</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23-LeetCode-34-Find-First-And-Last-Position-Of-Element-In-Sorted-Array/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23-LeetCode-34-Find-First-And-Last-Position-Of-Element-In-Sorted-Array/</id>
    <published>2020-07-22T16:19:00.000Z</published>
    <updated>2020-07-22T16:31:17.973Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的算法时间复杂度必须是 O(log n) 级别。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果数组中不存在目标值，返回 [-1, -1]。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [5,7,7,8,8,10], target = 8</span></span><br><span class="line"><span class="comment">//输出: [3,4] </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [5,7,7,8,8,10], target = 6</span></span><br><span class="line"><span class="comment">//输出: [-1,-1] </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 </span></span><br><span class="line"><span class="comment">// 👍 513 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFirstAndLastPositionOfElementInSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> FindFirstAndLastPositionOfElementInSortedArray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(Arrays.toString(solution.searchRange(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">2</span>&#125;, <span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 二分查找</span></span><br><span class="line"><span class="comment">     * 1. 首先考虑边界条件，如果nums为空，返回[-1,-1]，如果列表长度为1且target==nums[0]，返回[0,0]，否则返回[-1,-1]</span></span><br><span class="line"><span class="comment">     * 2. 利用二分法，如果找到值和target相同，则为获取目标值所在区间，从以下三种情况分析：</span></span><br><span class="line"><span class="comment">     *    (1). mid等于0，即left=0, right从0开始遍历，直到和target不相等则停止；</span></span><br><span class="line"><span class="comment">     *    (2). mid等于nums.length-1, 则right=nums.length-1, left从nums.length-1开始遍历，直到和target不相等则停止；</span></span><br><span class="line"><span class="comment">     *    (3). mid在中间，则left与right都等于mid，并且使左指针和右指针分别往左/右遍历，直到与target不相等为止;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(nums.length == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[<span class="number">0</span>]==target? <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;:<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> left=<span class="number">0</span>, right=nums.length-<span class="number">1</span>, flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">                    left = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)</span><br><span class="line">                    right = mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    flag=<span class="number">1</span>; <span class="comment">//有等于target的元素</span></span><br><span class="line">                    <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">                        left=<span class="number">0</span>;</span><br><span class="line">                        right=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">while</span>(right&lt;nums.length-<span class="number">1</span> &amp;&amp; nums[right+<span class="number">1</span>]==target)</span><br><span class="line">                            right++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(mid==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                        left=nums.length-<span class="number">1</span>;</span><br><span class="line">                        right=nums.length-<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(left&gt;<span class="number">0</span> &amp;&amp; nums[left-<span class="number">1</span>]==target)</span><br><span class="line">                            left--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        left=mid;</span><br><span class="line">                        right=mid;</span><br><span class="line">                        <span class="keyword">while</span>(right&lt;nums.length-<span class="number">1</span> &amp;&amp; nums[right+<span class="number">1</span>]==target)</span><br><span class="line">                            right++;</span><br><span class="line">                        <span class="keyword">while</span>(left&gt;<span class="number">0</span> &amp;&amp; nums[left-<span class="number">1</span>]==target)</span><br><span class="line">                            left--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flag==<span class="number">0</span>? <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;: <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left, right&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-33 Search In Rotated Sorted Array</title>
    <link href="http://yoursite.com/2020/07/22/2020-07-22-LeetCode-33-Search-In-Rotated-Sorted-Array/"/>
    <id>http://yoursite.com/2020/07/22/2020-07-22-LeetCode-33-Search-In-Rotated-Sorted-Array/</id>
    <published>2020-07-22T10:51:00.000Z</published>
    <updated>2020-07-22T10:52:10.064Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设按照升序排序的数组在预先未知的某个点上进行了旋转。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设数组中不存在重复的元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的算法时间复杂度必须是 O(log n) 级别。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [4,5,6,7,0,1,2], target = 0</span></span><br><span class="line"><span class="comment">//输出: 4</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [4,5,6,7,0,1,2], target = 3</span></span><br><span class="line"><span class="comment">//输出: -1 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 </span></span><br><span class="line"><span class="comment">// 👍 837 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInRotatedSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> SearchInRotatedSortedArray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.search(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 二分搜索</span></span><br><span class="line"><span class="comment">     * 本题我初始解法为：先找到翻转点，然后将数组复原为有序数组，然后二分搜索找到对应target的点，再根据翻转点index进行下标换算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 优解：</span></span><br><span class="line"><span class="comment">     * 数组本身不是有序的，因为进行旋转后只保证了数组的局部有序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当把数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的。如：[4,5,6,7,0,1,2]从6所在位置分开：</span></span><br><span class="line"><span class="comment">     * 得到[4,5,6]和[7,0,1,2]两部分。其中左边[4,5,6]部分是有序的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - 如果[left,mid-1]是有序数组，且target大小满足[nums[left], num[mid]]，那么应该将搜索范围缩小至[left,mid-1],</span></span><br><span class="line"><span class="comment">     * 否则在[mid+1, right]中寻找。</span></span><br><span class="line"><span class="comment">     * - 如果[mid, right]是有序数组，且target大小满足[nums[mid+1], nums[right]], 那么应该将搜索范围缩小至[mid+1, right]，</span></span><br><span class="line"><span class="comment">     * 否则在[left, mid-1]中寻找。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums.length==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[<span class="number">0</span>] == target? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left=<span class="number">0</span>, right=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                <span class="keyword">if</span>(nums[<span class="number">0</span>]&lt;=nums[mid])&#123;</span><br><span class="line">                    <span class="comment">// 如果前半部分为有序数组</span></span><br><span class="line">                    <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid])</span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 如果后半部分为有序数组</span></span><br><span class="line">                    <span class="keyword">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[n-<span class="number">1</span>])</span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-31 Next Permutation</title>
    <link href="http://yoursite.com/2020/07/22/2020-07-22-LeetCode-31-Next-Permutation/"/>
    <id>http://yoursite.com/2020/07/22/2020-07-22-LeetCode-31-Next-Permutation/</id>
    <published>2020-07-22T07:20:00.000Z</published>
    <updated>2020-07-22T07:21:39.027Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 必须原地修改，只允许使用额外常数空间。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。 </span></span><br><span class="line"><span class="comment">//1,2,3 → 1,3,2 </span></span><br><span class="line"><span class="comment">//3,2,1 → 1,2,3 </span></span><br><span class="line"><span class="comment">//1,1,5 → 1,5,1 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 </span></span><br><span class="line"><span class="comment">// 👍 577 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextPermutation</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> NextPermutation().<span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        solution.nextPermutation(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典序：比如对于1，2，3来说，可以组成这样的字典序列表[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]],</span></span><br><span class="line"><span class="comment">     * 我们所要找的就是其中元素的下一个列表元素。如[1,2,3]-&gt;[1,3,2]，如果到了最后一个元素，则推第一个元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Solution：</span></span><br><span class="line"><span class="comment">     * 1.先找出最大的索引k满足nums[k]&lt;nums[k+1],如果不存在，就翻转整个数组；</span></span><br><span class="line"><span class="comment">     * 2.再找出另一个最大索引l满足nums[l]&gt;nums[k];</span></span><br><span class="line"><span class="comment">     * 3.交换nums[l]和nums[k];</span></span><br><span class="line"><span class="comment">     * 4.最后反转nums[k+1:]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * E.g.</span></span><br><span class="line"><span class="comment">     * nums=[1,2,7,4,3,1]</span></span><br><span class="line"><span class="comment">     * 1. nums[1]=2</span></span><br><span class="line"><span class="comment">     * 2. nums[4]=3 &gt; nums[1]</span></span><br><span class="line"><span class="comment">     * 3. nums=[1,3,7,4,2,1]</span></span><br><span class="line"><span class="comment">     * 4. nums=[1,3,1,2,4,7]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    k = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k==-<span class="number">1</span>)&#123;</span><br><span class="line">                reverse(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> l = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[k])&#123;</span><br><span class="line">                    l = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, k, l);</span><br><span class="line">            reverse(nums, k+<span class="number">1</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">                swap(nums, i++, j--);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-27 Remove Element</title>
    <link href="http://yoursite.com/2020/07/22/2020-07-22-LeetCode-27-Remove-Element/"/>
    <id>http://yoursite.com/2020/07/22/2020-07-22-LeetCode-27-Remove-Element/</id>
    <published>2020-07-21T17:56:00.000Z</published>
    <updated>2020-07-21T18:17:29.195Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [3,2,2,3], val = 3,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//注意这五个元素可为任意顺序。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 为什么返回数值是整数，但输出的答案是数组呢? </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以想象内部操作如下: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span></span><br><span class="line"><span class="comment">//int len = removeElement(nums, val);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">//// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">//    print(nums[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 603 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveElement</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> RemoveElement().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.removeElement(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">int</span> i=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;nums.length &amp;&amp; nums[j]==val)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;nums.length)</span><br><span class="line">                    nums[++i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26 Remove Duplicates From Sorted Array</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-26-Remove-Duplicates-From-Sorted-Array/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-26-Remove-Duplicates-From-Sorted-Array/</id>
    <published>2020-07-21T15:26:00.000Z</published>
    <updated>2020-07-21T15:26:53.147Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定数组 nums = [1,1,2], </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [0,0,1,1,1,2,2,3,3,4],</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 为什么返回数值是整数，但输出的答案是数组呢? </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以想象内部操作如下: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="comment">//int len = removeDuplicates(nums);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">//// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">//    print(nums[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 1539 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesFromSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> RemoveDuplicatesFromSortedArray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.removeDuplicates(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]!=nums[i])&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    nums[i]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16 Four Sum</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-18-Four%20Sum/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-18-Four%20Sum/</id>
    <published>2020-07-21T14:35:00.000Z</published>
    <updated>2020-07-21T14:48:12.517Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c +</span></span><br><span class="line"><span class="comment">// d 的值与 target 相等？找出所有满足条件且不重复的四元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 答案中不可以包含重复的四元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//满足要求的四元组集合为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [-1,  0, 0, 1],</span></span><br><span class="line"><span class="comment">//  [-2, -1, 1, 2],</span></span><br><span class="line"><span class="comment">//  [-2,  0, 0, 2]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 哈希表 双指针 </span></span><br><span class="line"><span class="comment">// 👍 519 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> FourSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.fourSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">2</span>&#125;, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">          for(int first=0; first&lt;n; ++first)&#123;</span></span><br><span class="line"><span class="comment">                // 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line"><span class="comment">                if(first&gt;0 &amp;&amp; nums[first]==nums[first-1])</span></span><br><span class="line"><span class="comment">                    continue;</span></span><br><span class="line"><span class="comment">                for(int second=first+1; second&lt;n; ++second)&#123;</span></span><br><span class="line"><span class="comment">                    // 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line"><span class="comment">                    if(second&gt;first+1 &amp;&amp; nums[second]==nums[second-1])</span></span><br><span class="line"><span class="comment">                        continue;</span></span><br><span class="line"><span class="comment">                    int third = second+1, fourth = n-1;</span></span><br><span class="line"><span class="comment">                    while(third&lt;fourth)&#123;</span></span><br><span class="line"><span class="comment">                        if(nums[first]+nums[second]+nums[third]+nums[fourth]&lt;target)</span></span><br><span class="line"><span class="comment">                            third++;</span></span><br><span class="line"><span class="comment">                        else if(nums[first]+nums[second]+nums[third]+nums[fourth]&gt;target)</span></span><br><span class="line"><span class="comment">                            fourth--;</span></span><br><span class="line"><span class="comment">                        else&#123;</span></span><br><span class="line"><span class="comment">                            List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line"><span class="comment">                            list.add(nums[first]);</span></span><br><span class="line"><span class="comment">                            list.add(nums[second]);</span></span><br><span class="line"><span class="comment">                            list.add(nums[third]);</span></span><br><span class="line"><span class="comment">                            list.add(nums[fourth]);</span></span><br><span class="line"><span class="comment">                            res.add(list);</span></span><br><span class="line"><span class="comment">                            // c,d枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line"><span class="comment">                            while(third&lt;fourth &amp;&amp; nums[third+1]==nums[third])</span></span><br><span class="line"><span class="comment">                                third++;</span></span><br><span class="line"><span class="comment">                            while(third&lt;fourth &amp;&amp; nums[fourth-1]==nums[fourth])</span></span><br><span class="line"><span class="comment">                                fourth--;</span></span><br><span class="line"><span class="comment">                            third++;</span></span><br><span class="line"><span class="comment">                            fourth--;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> first=<span class="number">0</span>; first&lt;n; ++first)&#123;</span><br><span class="line">                <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                <span class="keyword">if</span>(first&gt;<span class="number">0</span> &amp;&amp; nums[first]==nums[first-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> second=first+<span class="number">1</span>; second&lt;n; ++second)&#123;</span><br><span class="line">                    <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                    <span class="keyword">if</span>(second&gt;first+<span class="number">1</span> &amp;&amp; nums[second]==nums[second-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> third=second+<span class="number">1</span>; third&lt;n; ++third)&#123;</span><br><span class="line">                        <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                        <span class="keyword">if</span>(third&gt;second+<span class="number">1</span> &amp;&amp; nums[third]==nums[third-<span class="number">1</span>])</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">int</span> tar = target-nums[first]-nums[second]-nums[third];</span><br><span class="line">                        <span class="keyword">int</span> fourth = n-<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(third&lt;fourth &amp;&amp; nums[fourth]&gt;tar)</span><br><span class="line">                            fourth--;</span><br><span class="line">                        <span class="comment">// 如果指针重合，那么随后续c增加时，不会有满足a+b+c+d=0且c&lt;d的d了，故退出循环.</span></span><br><span class="line">                        <span class="keyword">if</span>(fourth==third)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">if</span>(nums[fourth]==tar)&#123;</span><br><span class="line">                            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                            list.add(nums[first]);</span><br><span class="line">                            list.add(nums[second]);</span><br><span class="line">                            list.add(nums[third]);</span><br><span class="line">                            list.add(nums[fourth]);</span><br><span class="line">                            res.add(list);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16 Three Sum Closest</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-16-Three%20Sum%20Closest/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-16-Three%20Sum%20Closest/</id>
    <published>2020-07-21T13:58:00.000Z</published>
    <updated>2020-07-21T13:59:45.834Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和</span></span><br><span class="line"><span class="comment">//。假定每组输入只存在唯一答案。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：nums = [-1,2,1,-4], target = 1</span></span><br><span class="line"><span class="comment">//输出：2</span></span><br><span class="line"><span class="comment">//解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 提示： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 3 &lt;= nums.length &lt;= 10^3 </span></span><br><span class="line"><span class="comment">// -10^3 &lt;= nums[i] &lt;= 10^3 </span></span><br><span class="line"><span class="comment">// -10^4 &lt;= target &lt;= 10^4 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 514 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSumClosest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> ThreeSumClosest().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.threeSumClosest(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">4</span>&#125;, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 排序+双指针</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 解法类似"三数之和"</span></span><br><span class="line"><span class="comment">     * 1. 数组排序(升序)，假设数组长度n，先枚举a，其在数组中位置为i。为防止重复枚举，在位置[i+1,n)范围内枚举b和c.</span></span><br><span class="line"><span class="comment">     * 2. 借助双指针，pb和pc分别表示指向b和c的指针，初始时,pb指向位置i+1,pc指向位置n-1.</span></span><br><span class="line"><span class="comment">     * 3. 如果 a+b+c &gt;= target, pc向左移动一个位置；</span></span><br><span class="line"><span class="comment">     *    如果 a+b+c &lt; target, pb向右移动一个位置;</span></span><br><span class="line"><span class="comment">     *    如果 a+b+c == target, 直接返回结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">int</span> best = <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> first=<span class="number">0</span>; first&lt;n; ++first)&#123;</span><br><span class="line">                <span class="comment">// 保证和上一次枚举的元素不相等</span></span><br><span class="line">                <span class="keyword">if</span>(first&gt;<span class="number">0</span> &amp;&amp; nums[first]==nums[first-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 双指针枚举b和c</span></span><br><span class="line">                <span class="keyword">int</span> second = first+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> third = n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(second&lt;third)&#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[first] + nums[second] + nums[third];</span><br><span class="line">                    <span class="comment">// 和为target时直接返回答案</span></span><br><span class="line">                    <span class="keyword">if</span>(sum==target)</span><br><span class="line">                        <span class="keyword">return</span> target;</span><br><span class="line">                    <span class="comment">// 根据差值绝对值判断三数之和和target是否相近</span></span><br><span class="line">                    <span class="keyword">if</span>(Math.abs(sum-target)&lt;Math.abs(best-target))</span><br><span class="line">                        best = sum;</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        <span class="comment">// 如果和大于target，移动c对应的指针</span></span><br><span class="line">                        <span class="keyword">int</span> newthird = third-<span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 将c移动到下一个不相等的元素</span></span><br><span class="line">                        <span class="keyword">while</span>(second&lt;newthird &amp;&amp; nums[newthird]==nums[third])</span><br><span class="line">                            newthird--;</span><br><span class="line">                        third = newthird;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">// 如果和小于target，移动b对应的指针</span></span><br><span class="line">                        <span class="keyword">int</span> newsecond = second+<span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 将b移动到下一个不相等的元素</span></span><br><span class="line">                        <span class="keyword">while</span>(newsecond&lt;third &amp;&amp; nums[newsecond]==nums[second])</span><br><span class="line">                            newsecond++;</span><br><span class="line">                        second = newsecond;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> best;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-15 Three Sum</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-15-Three-Sum/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-15-Three-Sum/</id>
    <published>2020-07-21T11:07:00.000Z</published>
    <updated>2020-07-21T11:08:09.294Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复</span></span><br><span class="line"><span class="comment">//的三元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意：答案中不可以包含重复的三元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//满足要求的三元组集合为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [-1, 0, 1],</span></span><br><span class="line"><span class="comment">//  [-1, -1, 2]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 2398 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> ThreeSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = solution.threeSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Integer&gt; numList: res)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Integer num: numList)</span><br><span class="line">                System.out.printf(<span class="string">"%d "</span>, num);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 1: 排序+双指针</span></span><br><span class="line"><span class="comment">     * T: O(N^2)  S: O(N)</span></span><br><span class="line"><span class="comment">     * 如果简单地使用三重循环枚举所有的三元组，会得到O(N^3)个三元组。还需要使用哈希表来进行去重操作。</span></span><br><span class="line"><span class="comment">     * 比如: [1 -1 1 -1 0]可能会出现多次[1 -1 0] [1 -1 0]的重复三元组.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 而如果将数组中的元素从小到大进行排序，随后使用普通的三重循环，则可以减少重复。</span></span><br><span class="line"><span class="comment">     * [0,1,2,2,2,3]</span></span><br><span class="line"><span class="comment">     * 同时，对于每一重循环而言，相邻两次枚举的元素不能相同，否则也会造成重复。比如使用三重循环枚举到的</span></span><br><span class="line"><span class="comment">     * 第一个三元组为(0,1,2)，继续枚举下一个元素，仍然是三元组(0,1,2)，产生重复。因此我们需要将第三重</span></span><br><span class="line"><span class="comment">     * 循环"跳到"下一个不相同的元素，即3, 枚举三元组(0,1,3).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 此方法时间复杂度仍为O(N^3)。但是还可以继续优化。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果固定了前两重循环枚举到的元素a和b，那么只有唯一的c满足a+b+c=0，当第二重循环往后枚举一个元素b'时，</span></span><br><span class="line"><span class="comment">     * 由于b'&gt;b，那么满足a+b'+c'=0的c'一定有c'&lt;c，，即c'在数组中一定出现在c的左侧，*因此，我们可以从小</span></span><br><span class="line"><span class="comment">     * 到大枚举b，同时从大到小枚举c，即第二重循环和第三重循环成为并列关系。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 于是可以保持第二重循环不变，而将第三重循环变成一个从数组最右端开始向左移动的指针。即双指针。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">            <span class="comment">// 枚举a</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> first=<span class="number">0</span>; first&lt;n; ++first)&#123;</span><br><span class="line">                <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                <span class="keyword">if</span>(first&gt;<span class="number">0</span> &amp;&amp; nums[first]==nums[first-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// c对应的指针初始指向数组的最右端</span></span><br><span class="line">                <span class="keyword">int</span> third = n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> target = -nums[first];</span><br><span class="line">                <span class="comment">// 枚举b</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> second = first+<span class="number">1</span>; second&lt;n; ++second)&#123;</span><br><span class="line">                    <span class="comment">// 需要和上次枚举的数不相同</span></span><br><span class="line">                    <span class="keyword">if</span>(second &gt; first+<span class="number">1</span> &amp;&amp; nums[second]==nums[second-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//需要保证b的指针在c的指针的左侧</span></span><br><span class="line">                    <span class="keyword">while</span>(second&lt;third &amp;&amp; nums[second]+nums[third]&gt;target)</span><br><span class="line">                        --third;</span><br><span class="line">                    <span class="comment">// 如果指针重合，那么随着b后续的增加，就不会有满足a+b+c=0且b&lt;c的c了，所以推出循环</span></span><br><span class="line">                    <span class="keyword">if</span>(second==third)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>(nums[second]+nums[third]==target)&#123;</span><br><span class="line">                        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                        list.add(nums[first]);</span><br><span class="line">                        list.add(nums[second]);</span><br><span class="line">                        list.add(nums[third]);</span><br><span class="line">                        res.add(list);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-11 Container With Most Water</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-11-Container-With-Most-Water/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-11-Container-With-Most-Water/</id>
    <published>2020-07-20T18:00:00.000Z</published>
    <updated>2020-07-21T08:41:56.060Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i,</span></span><br><span class="line"><span class="comment">//ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明：你不能倾斜容器，且 n 的值至少为 2。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：[1,8,6,2,5,4,8,3,7]</span></span><br><span class="line"><span class="comment">//输出：49</span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针</span></span><br><span class="line"><span class="comment">// 👍 1649 👎 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerWithMostWater</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> ContainerWithMostWater().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.maxArea(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height.length-<span class="number">1</span>; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;height.length; j++)</span><br><span class="line">                    maxArea = Math.max(maxArea, (j-i)*Math.min(height[i], height[j]));</span><br><span class="line">            <span class="keyword">return</span> maxArea;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-5 Longest Palindromic Substring</title>
    <link href="http://yoursite.com/2020/07/20/2020-07-20-LeetCode-5-Longest-Palindromic-Substring/"/>
    <id>http://yoursite.com/2020/07/20/2020-07-20-LeetCode-5-Longest-Palindromic-Substring/</id>
    <published>2020-07-20T15:06:00.000Z</published>
    <updated>2020-07-20T15:06:41.519Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "babad"</span></span><br><span class="line"><span class="comment">//输出: "bab"</span></span><br><span class="line"><span class="comment">//注意: "aba" 也是一个有效答案。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "cbbd"</span></span><br><span class="line"><span class="comment">//输出: "bb"</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 字符串 动态规划 </span></span><br><span class="line"><span class="comment">// 👍 2449 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestPalindromicSubstring</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> LongestPalindromicSubstring().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.longestPalindrome(<span class="string">"babad"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()&lt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> len1 = expandAroundCenter(s,i,i);  <span class="comment">//长度为1的回文中心</span></span><br><span class="line">                <span class="keyword">int</span> len2 = expandAroundCenter(s,i,i+<span class="number">1</span>);  <span class="comment">//长度为2的回文中心</span></span><br><span class="line">                <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">                <span class="keyword">if</span>(len &gt; end-begin)&#123;</span><br><span class="line">                    begin = i - (len-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                    end = i + len/<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s.substring(begin, end+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">            <span class="keyword">while</span>(L&gt;=<span class="number">0</span> &amp;&amp; R&lt;s.length() &amp;&amp; s.charAt(L)==s.charAt(R))&#123;</span><br><span class="line">                L--;</span><br><span class="line">                R++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> R-L-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 1: 暴力破解法</span></span><br><span class="line"><span class="comment"> * T: O(n^3)  S: O(1)</span></span><br><span class="line"><span class="comment"> * 列举出所有的字串，并判断其是否为回文串，保存最长的回文串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法运行超时.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    // 判断字符串s是否为回文字符串</span></span><br><span class="line"><span class="comment">    public boolean checkStr(String s)&#123;</span></span><br><span class="line"><span class="comment">        int i=0, j=s.length()-1;</span></span><br><span class="line"><span class="comment">        for(; i&lt;j; i++,j--)&#123;</span></span><br><span class="line"><span class="comment">            if(s.charAt(i) != s.charAt(j))</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return i &gt;= j;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public String longestPalindrome(String s) &#123;</span></span><br><span class="line"><span class="comment">        String maxStr = "";</span></span><br><span class="line"><span class="comment">        int maxStrLen = 0;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;s.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">            for(int j=i+1; j&lt;=s.length(); j++)&#123;</span></span><br><span class="line"><span class="comment">                // System.out.println(s.substring(i,j));</span></span><br><span class="line"><span class="comment">                String substr = s.substring(i,j);</span></span><br><span class="line"><span class="comment">                if(checkStr(substr) &amp;&amp; substr.length()&gt;maxStrLen)&#123;</span></span><br><span class="line"><span class="comment">                    maxStr = substr;</span></span><br><span class="line"><span class="comment">                    maxStrLen = Math.max(maxStrLen, substr.length());</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return maxStr;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 2: 动态规划</span></span><br><span class="line"><span class="comment"> * T: O(n^2)  S: O(n^2) 动态规划的状态总数为O(n^2)，对于每个状态需要转移的时间为O(1)。存储动态规划状态需要的空间O(n^2).</span></span><br><span class="line"><span class="comment"> * 1. 如果已经知道"bab"是回文串，那么"ababa"一定也是回文串。因为其首尾两字母都是"a"。基于此思路，</span></span><br><span class="line"><span class="comment"> * 就可以用动态规划的方法解决本题。P(i,j)表示字符串s的第i到j个字母组成的串。</span></span><br><span class="line"><span class="comment"> * P(i,j) = | true  如果子串Si..Sj是回文串</span></span><br><span class="line"><span class="comment"> *          | false 其他情况(两种可能：a. S[i,j]本身不是一个回文串; b. i&gt;j，此时s[i,j]本身不合法.)</span></span><br><span class="line"><span class="comment"> * 由此就可以得出动态规划的状态转移方程:</span></span><br><span class="line"><span class="comment"> *          P(i,j) = P(i+1, j-1) ^ (Si==Sj)</span></span><br><span class="line"><span class="comment"> * 即只有s[i+1:j-1]是回文串，且s的第i和j个字母相同时，s[i:j]才会是回文串。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 上述情况建立在子串长度大于2的前提。而对于动态规划中的边界条件，即子串长度为1或2。长度为1的子串显然是个</span></span><br><span class="line"><span class="comment"> * 回文串。对于长度为2的子串，只要其两个字母相同，就是个回文串。</span></span><br><span class="line"><span class="comment"> * 因此得出动态规划的边界条件:</span></span><br><span class="line"><span class="comment"> *          | P(i,i) = true</span></span><br><span class="line"><span class="comment"> *          | P(i,i+1) = (Si == Si+1)</span></span><br><span class="line"><span class="comment"> * 最终的答案即为所有P(i,j)=true中j-i+1(即子串长度)的最大值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public String longestPalindrome(String s) &#123;</span></span><br><span class="line"><span class="comment">        int len = s.length(), maxLen = 1, begin = 0;</span></span><br><span class="line"><span class="comment">        if(len &lt; 2)</span></span><br><span class="line"><span class="comment">            return s;</span></span><br><span class="line"><span class="comment">        // 1. 状态定义</span></span><br><span class="line"><span class="comment">        // dp[i][j]表示s[i...j]是否是回文串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 2. 初始化</span></span><br><span class="line"><span class="comment">        boolean[][] dp = new boolean[len][len];</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="comment">            dp[i][i] = true;</span></span><br><span class="line"><span class="comment">        char[] chars = s.toCharArray();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 3. 状态转移</span></span><br><span class="line"><span class="comment">        // 先填左下角: 先一列一列填写再一行一行填写.</span></span><br><span class="line"><span class="comment">        for(int j=1; j&lt;len; j++)&#123;</span></span><br><span class="line"><span class="comment">            for(int i=0; i&lt;j; i++)&#123;</span></span><br><span class="line"><span class="comment">                // 首尾字符不相等，不是回文串</span></span><br><span class="line"><span class="comment">                if(chars[i] != chars[j])</span></span><br><span class="line"><span class="comment">                    dp[i][j] = false;</span></span><br><span class="line"><span class="comment">                else&#123;</span></span><br><span class="line"><span class="comment">                    // 相等的情况, 考虑首尾去除后的边界情况.</span></span><br><span class="line"><span class="comment">                    // 即去除首尾后没有字符剩余或者剩下一个字符时，肯定是回文串</span></span><br><span class="line"><span class="comment">                    if(j-i &lt; 3)</span></span><br><span class="line"><span class="comment">                        dp[i][j] = true;</span></span><br><span class="line"><span class="comment">                    else</span></span><br><span class="line"><span class="comment">                        dp[i][j] = dp[i+1][j-1];</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                // dp[i][j]==true，表示s[i...j]是否是回文串</span></span><br><span class="line"><span class="comment">                if(dp[i][j] &amp;&amp; j-i+1&gt;maxLen)&#123;</span></span><br><span class="line"><span class="comment">                    maxLen = j-i+1;</span></span><br><span class="line"><span class="comment">                    begin = i;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 4. 返回</span></span><br><span class="line"><span class="comment">        return s.substring(begin,begin+maxLen);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 3: 中心扩展算法</span></span><br><span class="line"><span class="comment"> * T: O(n^2)  S: O(1)  长度为1和2的回文中心分别有n和n-1个，每个回文中心最多会向外扩展O(n)次.</span></span><br><span class="line"><span class="comment"> * 1. 观察动态规划方法中的状态转移方程</span></span><br><span class="line"><span class="comment"> *    | P(i,i) = true</span></span><br><span class="line"><span class="comment"> *    | P(i,i+1) = (Si==Si+1)</span></span><br><span class="line"><span class="comment"> *    | P(i,j) = P(i+1, j-1) ^ (Si==Sj)</span></span><br><span class="line"><span class="comment"> * 其中状态转移链: P(i,j) &lt;- P(i+1,j-1) &lt;- P(i+2,j-2) &lt;- ... &lt;- 某一边界情况</span></span><br><span class="line"><span class="comment"> * 可以发现，所有状态在转移的时候的可能性是唯一的，即我们可以从每一种边界情况开始"扩展"，也可以</span></span><br><span class="line"><span class="comment"> * 得出所有的状态对应的答案。</span></span><br><span class="line"><span class="comment"> * 2. 边界情况即为子串为1或2的情况。枚举每一种边界情况，并从对应的子串开始不断向两边扩展。如果</span></span><br><span class="line"><span class="comment"> * 两边的字母不同，就可以停止扩展。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本质：枚举所有的"回文中心"并尝试扩展，直到无法扩展为止。此时的回文串长度即为此"回文中心"下的</span></span><br><span class="line"><span class="comment"> * 最长回文串长度。对所有的长度求出最大值即为所求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public String longestPalindrome(String s) &#123;</span></span><br><span class="line"><span class="comment">        if(s==null || s.length()&lt;1)</span></span><br><span class="line"><span class="comment">            return "";</span></span><br><span class="line"><span class="comment">        int begin = 0, end = 0;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;s.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">            int len1 = expandAroundCenter(s,i,i);  //长度为1的回文中心</span></span><br><span class="line"><span class="comment">            int len2 = expandAroundCenter(s,i,i+1);  //长度为2的回文中心</span></span><br><span class="line"><span class="comment">            int len = Math.max(len1, len2);</span></span><br><span class="line"><span class="comment">            if(len &gt; end-begin)&#123;</span></span><br><span class="line"><span class="comment">                begin = i - (len-1)/2;</span></span><br><span class="line"><span class="comment">                end = i + len/2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return s.substring(begin, end+1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private int expandAroundCenter(String s, int left, int right)&#123;</span></span><br><span class="line"><span class="comment">        int L = left, R = right;</span></span><br><span class="line"><span class="comment">        while(L&gt;=0 &amp;&amp; R&lt;s.length() &amp;&amp; s.charAt(L)==s.charAt(R))&#123;</span></span><br><span class="line"><span class="comment">            L--;</span></span><br><span class="line"><span class="comment">            R++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return R-L-1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-4 Median Of Two Sorted Arrays</title>
    <link href="http://yoursite.com/2020/07/20/2020-07-20-LeetCode-4-Median-Of-Two-Sorted-Arrays/"/>
    <id>http://yoursite.com/2020/07/20/2020-07-20-LeetCode-4-Median-Of-Two-Sorted-Arrays/</id>
    <published>2020-07-19T18:21:00.000Z</published>
    <updated>2020-07-19T18:22:43.533Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设 nums1 和 nums2 不会同时为空。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// nums1 = [1, 3]</span></span><br><span class="line"><span class="comment">//nums2 = [2]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//则中位数是 2.0</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// nums1 = [1, 2]</span></span><br><span class="line"><span class="comment">//nums2 = [3, 4]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//则中位数是 (2 + 3)/2 = 2.5</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 分治算法 </span></span><br><span class="line"><span class="comment">// 👍 2929 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MedianOfTwoSortedArrays</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> MedianOfTwoSortedArrays().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.findMedianSortedArrays(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> length1 = nums1.length, length2 = nums2.length;</span><br><span class="line">            <span class="keyword">int</span> totalLength = length1 + length2;</span><br><span class="line">            <span class="keyword">if</span>(totalLength % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> midIndex = totalLength / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">double</span> median = getKMinthElement(nums1, nums2, midIndex+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> median;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> midIndex1 = totalLength / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> midIndex2 = totalLength / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">double</span> median = (getKMinthElement(nums1, nums2, midIndex1 + <span class="number">1</span>) +getKMinthElement(nums1, nums2, midIndex2 + <span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">                <span class="keyword">return</span> median;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出nums1，nums2中第k小的元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKMinthElement</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> length1 = nums1.length, length2 = nums2.length;</span><br><span class="line">            <span class="keyword">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 边界情况</span></span><br><span class="line">                <span class="keyword">if</span>(index1 == length1)&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums2[index2 + k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(index2 == length2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums1[index1 + k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> Math.min(nums1[index1], nums2[index2]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 正常情况</span></span><br><span class="line">                <span class="keyword">int</span> half = k/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> newIndex1 = Math.min(index1+half, length1) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> newIndex2 = Math.min(index2+half, length2) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];</span><br><span class="line">                <span class="keyword">if</span>(pivot1 &lt;= pivot2)&#123;</span><br><span class="line">                    k -= (newIndex1 - index1 + <span class="number">1</span>);</span><br><span class="line">                    index1 = newIndex1 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    k -= (newIndex2 - index2 + <span class="number">1</span>);</span><br><span class="line">                    index2 = newIndex2 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力破解：</span></span><br><span class="line"><span class="comment"> * 1. 使用归并方式，合并两个有序数组，得到的大的有序数组的中间位置元素，即为中位数</span></span><br><span class="line"><span class="comment"> * 2. 只需找到中位数位置也可。两数组长度已知，中位数对应的两数组下标和已知，维护两个指针，初识时分别</span></span><br><span class="line"><span class="comment"> * 指向两个数组的下标为0的位置。每次将指向较小值的指针后移一位(若一指针已达数组末尾，则仅移动另一指针)，</span></span><br><span class="line"><span class="comment"> * 直到到达中位数的位置.</span></span><br><span class="line"><span class="comment"> * 这两种思路的时间复杂度均为O(m+n). 但题目时间复杂度要求为O(log(m+n))。而对时间复杂度要求有log，通常</span></span><br><span class="line"><span class="comment"> * 都需用到二分查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Solution 1: 二分查找</span></span><br><span class="line"><span class="comment"> * S: O(log(m+n))  S: O(1)</span></span><br><span class="line"><span class="comment"> * 中位数：两有序数组中的第(m+n)/2个元素(m+n为奇数)； 两有序数组中的第(m+n)/2个元素和第(m+n)/2+1个元素</span></span><br><span class="line"><span class="comment"> * 的平均值(m+n为偶数).   因此转化为寻找两有序数组中的第k小的数(k为(m+n)/2或(m+n)/2+1).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 假设两个有序数组分别是 A 和 B。要找到第 k 个元素，我们可以比较 A[k/2-1] 和 B[k/2-1]，其中 / 表示整数</span></span><br><span class="line"><span class="comment"> * 除法。由于 A[k/2-1] 和 B[k/2-1] 的前面分别有 A[0,..,k/2-2] 和 B[0,..,k/2-2]，即 k-2 个元素，对于</span></span><br><span class="line"><span class="comment"> * A[k/2-1] 和 B[k/2-1] 中的较小值，最多只会有 (k/2-1)+(k/2-1) ≤ k−2 个元素比它小，那么它就不能是第 k</span></span><br><span class="line"><span class="comment"> * 小的数了。</span></span><br><span class="line"><span class="comment"> * 因此归纳出三种情况:</span></span><br><span class="line"><span class="comment"> * 1. 如果 A[k/2-1] &lt; B[k/2-1]，则比 A[k/2-1] 小的数最多只有 A 的前 k/2-1 个数和 B 的前 k/2-1 个数，</span></span><br><span class="line"><span class="comment"> * 即比 A[k/2-1] 小的数最多只有 k-2 个，因此 A[k/2-1] 不可能是第 k 个数，A[0] 到 A[k/2−1] 也都不可能是</span></span><br><span class="line"><span class="comment"> * 第 k 个数，可以全部排除。</span></span><br><span class="line"><span class="comment"> * 2. 如果 A[k/2-1] &gt; B[k/2-1]，则可以排除 B[0] 到 B[k/2−1]。</span></span><br><span class="line"><span class="comment"> * 3. 如果 A[k/2−1]=B[k/2−1]，则可以归入第一种情况处理。</span></span><br><span class="line"><span class="comment"> * 同时，我们将在排除后的新数组上仅需进行二分查找，并且根据我们排除数的个数，减少k的值，因为所排除的数都不大于</span></span><br><span class="line"><span class="comment"> * 第k小的数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三种情况需特殊处理</span></span><br><span class="line"><span class="comment"> * 1. 如果 A[k/2−1] 或者 B[k/2−1] 越界，那么我们可以选取对应数组中的最后一个元素。在这种情况下，我们必须</span></span><br><span class="line"><span class="comment"> * 根据排除数的个数减少 k 的值，而不能直接将 k 减去 k/2。</span></span><br><span class="line"><span class="comment"> * 2. 如果一个数组为空，说明该数组中的所有元素都被排除，那么我们可以直接返回另一个数组中第k小的元素。</span></span><br><span class="line"><span class="comment"> * 3. 如果k=1，我们只要返回两个数组首元素的最小值即可。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * E.g.</span></span><br><span class="line"><span class="comment"> * A: 1 3 4 9   (m=4)</span></span><br><span class="line"><span class="comment"> * B: 1 2 3 4 5 6 7 8 9  (n=9)   k=7   k/2-1=2</span></span><br><span class="line"><span class="comment"> * A[2] &gt; B[2], 排除B[0]-B[2]，更新k: k=k-k/2=4   k/2-1=1</span></span><br><span class="line"><span class="comment"> * A: 1 3 4 9</span></span><br><span class="line"><span class="comment"> * B: [1 2 3] 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment"> * A[1] &lt; B[4], 排除A[0]-A[1]，更新k: k=k-k/2=2   k/2-1=0</span></span><br><span class="line"><span class="comment"> * A: [1 3] 4 9</span></span><br><span class="line"><span class="comment"> * B: [1 2 3] 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment"> * A[2] = B[3]，排除A[2]， 更新k: k=k-k/2=1, 由于k值变为1，因此直接比较两有序数组中未排除下标范围内的第一个</span></span><br><span class="line"><span class="comment"> * 数，其中较小的数即为第k个数.</span></span><br><span class="line"><span class="comment"> * A[3] &gt; B[3]  =&gt;   B[3] = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</span></span><br><span class="line"><span class="comment">        int length1 = nums1.length, length2 = nums2.length;</span></span><br><span class="line"><span class="comment">        int totalLength = length1 + length2;</span></span><br><span class="line"><span class="comment">        if(totalLength % 2 == 1)&#123;</span></span><br><span class="line"><span class="comment">            int midIndex = totalLength / 2;</span></span><br><span class="line"><span class="comment">            double median = getKMinthElement(nums1, nums2, midIndex+1);</span></span><br><span class="line"><span class="comment">            return median;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            int midIndex1 = totalLength / 2 - 1;</span></span><br><span class="line"><span class="comment">            int midIndex2 = totalLength / 2;</span></span><br><span class="line"><span class="comment">            double median = (getKMinthElement(nums1, nums2, midIndex1 + 1) +getKMinthElement(nums1, nums2, midIndex2 + 1))/2.0;</span></span><br><span class="line"><span class="comment">            return median;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 找出nums1，nums2中第k小的元素</span></span><br><span class="line"><span class="comment">    public int getKMinthElement(int[] nums1, int[] nums2, int k)&#123;</span></span><br><span class="line"><span class="comment">        int length1 = nums1.length, length2 = nums2.length;</span></span><br><span class="line"><span class="comment">        int index1 = 0, index2 = 0;</span></span><br><span class="line"><span class="comment">        while(true)&#123;</span></span><br><span class="line"><span class="comment">            // 边界情况</span></span><br><span class="line"><span class="comment">            if(index1 == length1)&#123;</span></span><br><span class="line"><span class="comment">                return nums2[index2 + k - 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(index2 == length2)&#123;</span></span><br><span class="line"><span class="comment">                return nums1[index1 + k - 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(k == 1)&#123;</span></span><br><span class="line"><span class="comment">                return Math.min(nums1[index1], nums2[index2]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // 正常情况</span></span><br><span class="line"><span class="comment">            int half = k/2;</span></span><br><span class="line"><span class="comment">            int newIndex1 = Math.min(index1+half, length1) - 1;</span></span><br><span class="line"><span class="comment">            int newIndex2 = Math.min(index2+half, length2) - 1;</span></span><br><span class="line"><span class="comment">            int pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];</span></span><br><span class="line"><span class="comment">            if(pivot1 &lt;= pivot2)&#123;</span></span><br><span class="line"><span class="comment">                k -= (newIndex1 - index1 + 1);</span></span><br><span class="line"><span class="comment">                index1 = newIndex1 + 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else&#123;</span></span><br><span class="line"><span class="comment">                k -= (newIndex2 - index2 + 1);</span></span><br><span class="line"><span class="comment">                index2 = newIndex2 + 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 2: 划分数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 首先，在任意位置 i 将 A 划分成两个部分：</span></span><br><span class="line"><span class="comment"> *            left_A            |          right_A</span></span><br><span class="line"><span class="comment"> *     A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]</span></span><br><span class="line"><span class="comment"> *    由于 A 中有 m 个元素， 所以有 m+1 种划分的方法。其中i=0时, left_A为空集，i=m时，right_A为空集</span></span><br><span class="line"><span class="comment"> * 2. 将 left_A 和 left_B 放入一个集合，并将 right_A 和 right_B 放入另一个集合。 再把这两个新的集合</span></span><br><span class="line"><span class="comment"> *    分别命名为 left_part 和 right_part：</span></span><br><span class="line"><span class="comment"> *           left_part          |         right_part</span></span><br><span class="line"><span class="comment"> *     A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]</span></span><br><span class="line"><span class="comment"> *     B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    1⃣ 当A和B的总长度为偶数时，如果可以确认：</span></span><br><span class="line"><span class="comment"> *      - len(left_part) = len(right_part)</span></span><br><span class="line"><span class="comment"> *      - max(left_part) &lt;= min(right_part)</span></span><br><span class="line"><span class="comment"> *    那么，&#123;A,B&#125;中所有元素已经被划分为相同长度的两部分，且前一部分中的元素总是小于或等于后一部分中的元素。</span></span><br><span class="line"><span class="comment"> *    中位数就是前一部分的最大值和后一部分的最小值的平均值。</span></span><br><span class="line"><span class="comment"> *          median = [max(left_part) + min(right_part)] / 2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    2⃣ 当A和B的总长度为奇数时，如果可以确认：</span></span><br><span class="line"><span class="comment"> *      - len(left_part) = len(right_part) + 1</span></span><br><span class="line"><span class="comment"> *      - max(left_part) &lt;= min(right_part)</span></span><br><span class="line"><span class="comment"> *    那么，&#123;A,B&#125;中的所有元素已经被划分为两个部分，前一部分比后一部分多一个元素，且前一部分中的元素总是小于或</span></span><br><span class="line"><span class="comment"> *    等于后一部分中的元素。中位数就是前一部分的最大值。</span></span><br><span class="line"><span class="comment"> *          median = max(left_part)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    第一个条件对于总长度是偶数和奇数的情况有所不同，但是可以将两种情况合并。第二个条件对于总长度是偶数和奇数</span></span><br><span class="line"><span class="comment"> *    的情况是一样的。要确保这两个条件，只需要保证：</span></span><br><span class="line"><span class="comment"> *    1⃣ i+j = m-i+n-j(当m+n为偶数) 或 i+j = m-i+n-j+1(当m+n为奇数)。等号左侧为前一部分的元素个数，右侧为</span></span><br><span class="line"><span class="comment"> *    后一部分的元素个数。将i+j全部移到等号左侧，得到i+j = (m+n+1)/2。 此处分数结果只保留整数部分。</span></span><br><span class="line"><span class="comment"> *    2⃣ 0&lt;=i&lt;=m, 0&lt;=j&lt;=n。如果我们规定A的长度小于等于B的长度，即m&lt;=n。这样对于任意的 i∈[0,m]，都有</span></span><br><span class="line"><span class="comment"> *    j= (m+n+1)/2 - i ∈[0,n]。那么我们在[0,m]的范围内枚举i并得到j，就不需要额外的性质了。</span></span><br><span class="line"><span class="comment"> *      - 如果A的长度较大，那么只要交换A和B即可。</span></span><br><span class="line"><span class="comment"> *      - 如果m &gt; n, 那么得出的j有可能是负数。</span></span><br><span class="line"><span class="comment"> *    3⃣ B[j-1] &lt;= A[i] 以及 A[i-1] &lt;= B[j]，即前一部分的最大值小于等于后一部分的最小值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    为简化分析，假设A[i-1], B[j-1], A[i], B[j]总是存在。对于i=0. i=m, j=0, j=n这样的临界条件，我们只需要</span></span><br><span class="line"><span class="comment"> *    规定A[-1]=B[-1]=-∞, A[m]=B[n]=∞即可。这也是比较直观的：当一个数组不出现在前一部分时，对应的值为负无穷，</span></span><br><span class="line"><span class="comment"> *    就不会对前一部分的最大值产生影响；当一个数组不出现在后一部分时，对应的值为正无穷，</span></span><br><span class="line"><span class="comment"> *    因此，需要：</span></span><br><span class="line"><span class="comment"> *    在[0,m]中找到i,使得：</span></span><br><span class="line"><span class="comment"> *      B[j-1] &lt;= A[i] 且 A[i-1] &lt;= B[j]，其中j=(m+n+1)/2-i.</span></span><br><span class="line"><span class="comment"> *    我们证明它等价于：</span></span><br><span class="line"><span class="comment"> *    在[0,m]中找到最大的i，使得：</span></span><br><span class="line"><span class="comment"> *      A[i-1] &lt;= B[j]，其中j=(m+n+1)/2-i</span></span><br><span class="line"><span class="comment"> *    其是因为：</span></span><br><span class="line"><span class="comment"> *      - 当i从0~m递增时，A[i-1]递增, B[j]递减，所以一定存在一个最大的i满足A[i-1] &lt;= B[j];</span></span><br><span class="line"><span class="comment"> *      - 如果i是最大的，那么说明i+1不满足。将i+1带入可以得到A[i]&gt;B[j-1],也就是B[j-1]&lt;A[i]，就和进行等价变换前i的</span></span><br><span class="line"><span class="comment"> *      性质一致了(甚至更强)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    因此我们可以对i在[0,m]的区间上进行二分搜索，找到最大的满足A[i-1]&lt;=B[j]的i值，就得到了划分的方法。此时，划分</span></span><br><span class="line"><span class="comment"> *    前一部分元素中的最大值，以及划分后一部分元素中的最小值，才可能作为就是这两个数组的中位数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</span></span><br><span class="line"><span class="comment">        if (nums1.length &gt; nums2.length) &#123;</span></span><br><span class="line"><span class="comment">            return findMedianSortedArrays(nums2, nums1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int m = nums1.length;</span></span><br><span class="line"><span class="comment">        int n = nums2.length;</span></span><br><span class="line"><span class="comment">        int left = 0, right = m, ansi = -1;</span></span><br><span class="line"><span class="comment">        // median1：前一部分的最大值</span></span><br><span class="line"><span class="comment">        // median2：后一部分的最小值</span></span><br><span class="line"><span class="comment">        int median1 = 0, median2 = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        while (left &lt;= right) &#123;</span></span><br><span class="line"><span class="comment">            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]</span></span><br><span class="line"><span class="comment">            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]</span></span><br><span class="line"><span class="comment">            int i = (left + right) / 2;</span></span><br><span class="line"><span class="comment">            int j = (m + n + 1) / 2 - i;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]</span></span><br><span class="line"><span class="comment">            int nums_im1 = (i == 0 ? Integer.MIN_VALUE : nums1[i - 1]);</span></span><br><span class="line"><span class="comment">            int nums_i = (i == m ? Integer.MAX_VALUE : nums1[i]);</span></span><br><span class="line"><span class="comment">            int nums_jm1 = (j == 0 ? Integer.MIN_VALUE : nums2[j - 1]);</span></span><br><span class="line"><span class="comment">            int nums_j = (j == n ? Integer.MAX_VALUE : nums2[j]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if (nums_im1 &lt;= nums_j) &#123;</span></span><br><span class="line"><span class="comment">                ansi = i;</span></span><br><span class="line"><span class="comment">                median1 = Math.max(nums_im1, nums_jm1);</span></span><br><span class="line"><span class="comment">                median2 = Math.min(nums_i, nums_j);</span></span><br><span class="line"><span class="comment">                left = i + 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else &#123;</span></span><br><span class="line"><span class="comment">                right = i - 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="分治算法" scheme="http://yoursite.com/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-3 Longest SubString Without Repeating Characters</title>
    <link href="http://yoursite.com/2020/07/19/2020-07-19-LeetCode-3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://yoursite.com/2020/07/19/2020-07-19-LeetCode-3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2020-07-19T08:09:00.000Z</published>
    <updated>2020-07-19T10:12:04.058Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "abcabcbb"</span></span><br><span class="line"><span class="comment">//输出: 3 </span></span><br><span class="line"><span class="comment">//解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "bbbbb"</span></span><br><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="comment">//解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 3: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "pwwkew"</span></span><br><span class="line"><span class="comment">//输出: 3</span></span><br><span class="line"><span class="comment">//解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span></span><br><span class="line"><span class="comment">//     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 哈希表 双指针 字符串 Sliding Window </span></span><br><span class="line"><span class="comment">// 👍 3996 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestSubstringWithoutRepeatingCharacters</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> LongestSubstringWithoutRepeatingCharacters().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(</span><br><span class="line">                solution.lengthOfLongestSubstring(<span class="keyword">new</span> String(<span class="string">"abcabcbb"</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// HashSet, 用于判断字符是否存在过(重复)</span></span><br><span class="line">            Set&lt;Character&gt; charSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> rk = -<span class="number">1</span>, maxlength = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 左指针右移，移动一字符</span></span><br><span class="line">                    charSet.remove(s.charAt(i-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(rk+<span class="number">1</span>&lt;s.length() &amp;&amp; !charSet.contains(s.charAt(rk+<span class="number">1</span>)))&#123;</span><br><span class="line">                    <span class="comment">// 移动右指针</span></span><br><span class="line">                    charSet.add(s.charAt(rk+<span class="number">1</span>));</span><br><span class="line">                    rk += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// i-&gt;rk间为无重复字符子串</span></span><br><span class="line">                maxlength = Math.max(maxlength, rk-i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> maxlength;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution：滑动窗口</span></span><br><span class="line"><span class="comment"> * T: O()   S: O()</span></span><br><span class="line"><span class="comment"> * 1. 找出字符串中从每一个字符开始的，不包含重复字符的最长字串，那么其中最长的那个字符串就是结果.</span></span><br><span class="line"><span class="comment"> * 2. 以字符串abcabcbb为例:</span></span><br><span class="line"><span class="comment"> *     (a)bcabcbb -&gt; (abc)abcbb</span></span><br><span class="line"><span class="comment"> *     a(b)cabcbb -&gt; a(bca)bcbb</span></span><br><span class="line"><span class="comment"> *     ab(c)abcbb -&gt; ab(cab)cbb</span></span><br><span class="line"><span class="comment"> *     abc(a)bcbb -&gt; abc(abc)bb</span></span><br><span class="line"><span class="comment"> *     abca(b)cbb -&gt; abca(bc)bb</span></span><br><span class="line"><span class="comment"> *     abcab(c)bb -&gt; abcab(cb)b</span></span><br><span class="line"><span class="comment"> *     abcabc(b)b -&gt; abcabc(b)b</span></span><br><span class="line"><span class="comment"> *     abcabcb(b) -&gt; abcabcb(b)</span></span><br><span class="line"><span class="comment"> * 3. 可以发现规律: 在依次递增枚举字串的起始位置时，字串的结束位置也是在递增的.</span></span><br><span class="line"><span class="comment"> *    原因在于： 加入选取字符串第k个字符作为起始位置并得到了不包含重复字符的最长子串的结束位置为rk,那么选择第k+1个字符作为起始位置时，</span></span><br><span class="line"><span class="comment"> *              显然k+1-&gt;rk的字符是不重复的，因此可以继续增大rk，直到右侧出现了重复字符为止.</span></span><br><span class="line"><span class="comment"> * 参数：双指针(左指针: 枚举子串的起始为止；右指针: rk), Java HashSet(左指针右移，从HashSet中移除一字符；右指针右移，向HashSet添加一字符)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int lengthOfLongestSubstring(String s) &#123;</span></span><br><span class="line"><span class="comment">        // HashSet, 用于判断字符是否存在过(重复)</span></span><br><span class="line"><span class="comment">        Set&lt;Character&gt; charSet = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">        int rk = -1, maxlength = 0;</span></span><br><span class="line"><span class="comment">        for(int i = 0; i&lt;s.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">            if(i != 0)&#123;</span></span><br><span class="line"><span class="comment">                // 左指针右移，移动一字符</span></span><br><span class="line"><span class="comment">                charSet.remove(s.charAt(i-1));</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            while(rk+1&lt;s.length() &amp;&amp; !charSet.contains(s.charAt(rk+1)))&#123;</span></span><br><span class="line"><span class="comment">                // 移动右指针</span></span><br><span class="line"><span class="comment">                charSet.add(s.charAt(rk+1));</span></span><br><span class="line"><span class="comment">                rk += 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // i-&gt;rk间为无重复字符子串</span></span><br><span class="line"><span class="comment">            maxlength = Math.max(maxlength, rk-i+1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return maxlength;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="滑动窗口" scheme="http://yoursite.com/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-2 Add Two Number</title>
    <link href="http://yoursite.com/2020/07/18/2020-07-18-LeetCode-2-Add-Two-Number/"/>
    <id>http://yoursite.com/2020/07/18/2020-07-18-LeetCode-2-Add-Two-Number/</id>
    <published>2020-07-18T15:10:00.000Z</published>
    <updated>2020-07-19T10:11:56.337Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span></span><br><span class="line"><span class="comment">//输出：7 -&gt; 0 -&gt; 8</span></span><br><span class="line"><span class="comment">//原因：342 + 465 = 807</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 链表 数学 </span></span><br><span class="line"><span class="comment">// 👍 4617 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTwoNumbers</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> AddTwoNumbers().<span class="keyword">new</span> Solution();</span><br><span class="line">        ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>), l2 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        l1.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        l1.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        l2.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        l2.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        l3.next = solution.addTwoNumbers(l1, l2);</span><br><span class="line">        <span class="keyword">while</span>(l3.next !=<span class="keyword">null</span>) &#123;</span><br><span class="line">            l3 = l3.next;</span><br><span class="line">            System.out.print(l3.val + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x)&#123; val=x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">     * public class ListNode &#123;</span></span><br><span class="line"><span class="comment">     *     int val;</span></span><br><span class="line"><span class="comment">     *     ListNode next;</span></span><br><span class="line"><span class="comment">     *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">            ListNode sumHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            ListNode p = l1, q = l2, currNode = sumHead;</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(p!=<span class="keyword">null</span> || q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (p!=<span class="keyword">null</span>)? p.val : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> y = (q!=<span class="keyword">null</span>)? q.val : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                currNode.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                currNode = currNode.next;</span><br><span class="line">                <span class="keyword">if</span>(p != <span class="keyword">null</span>)</span><br><span class="line">                    p = p.next;</span><br><span class="line">                <span class="keyword">if</span>(q != <span class="keyword">null</span>)</span><br><span class="line">                    q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)</span><br><span class="line">                currNode.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">            <span class="keyword">return</span> sumHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-1 Two Sum</title>
    <link href="http://yoursite.com/2020/07/18/2020-07-18-LeetCode-1-Two-Sum/"/>
    <id>http://yoursite.com/2020/07/18/2020-07-18-LeetCode-1-Two-Sum/</id>
    <published>2020-07-18T14:20:00.000Z</published>
    <updated>2020-07-19T10:11:45.991Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class="line"><span class="comment">//所以返回 [0, 1]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 哈希表 </span></span><br><span class="line"><span class="comment">// 👍 8675 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> TwoSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span>[] res = solution.twoSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>&#125;, <span class="number">9</span>);</span><br><span class="line">        System.out.println(Arrays.toString(res));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution1: 暴力破解</span></span><br><span class="line"><span class="comment"> * T: O(n^2)  S: O(1)</span></span><br><span class="line"><span class="comment"> * class Solution &#123;</span></span><br><span class="line"><span class="comment"> *         public int[] twoSum(int[] nums, int target) &#123;</span></span><br><span class="line"><span class="comment"> *             for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment"> *                 for (int j = i + 1; j &lt; nums.length; j++) &#123;</span></span><br><span class="line"><span class="comment"> *                     if (nums[j] == target - nums[i]) &#123;</span></span><br><span class="line"><span class="comment"> *                         return new int[] &#123; i, j &#125;;</span></span><br><span class="line"><span class="comment"> *                     &#125;</span></span><br><span class="line"><span class="comment"> *                 &#125;</span></span><br><span class="line"><span class="comment"> *             &#125;</span></span><br><span class="line"><span class="comment"> *             throw new IllegalArgumentException("No two sum solution");</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution2: 两遍哈希表</span></span><br><span class="line"><span class="comment"> * T: O(n)  S: O(n)</span></span><br><span class="line"><span class="comment"> * 1. 第一次迭代，将每个元素的值和它的索引添加到表中.</span></span><br><span class="line"><span class="comment"> * 2. 第二次迭代，检查每个元素所对应的目标元素(target-nums[i]是否在表中)</span></span><br><span class="line"><span class="comment"> * class Solution &#123;</span></span><br><span class="line"><span class="comment"> *     public int[] twoSum(int[] nums, int target) &#123;</span></span><br><span class="line"><span class="comment"> *         Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment"> *         for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment"> *             map.put(nums[i], i);</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *         for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment"> *             int complement = target - nums[i];</span></span><br><span class="line"><span class="comment"> *             if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span></span><br><span class="line"><span class="comment"> *                 return new int[] &#123; i, map.get(complement) &#125;;</span></span><br><span class="line"><span class="comment"> *             &#125;</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *         throw new IllegalArgumentException("No two sum solution");</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution: 一遍哈希表</span></span><br><span class="line"><span class="comment"> * T: O(n)   S: O(n)</span></span><br><span class="line"><span class="comment"> * class Solution &#123;</span></span><br><span class="line"><span class="comment"> *     public int[] twoSum(int[] nums, int target) &#123;</span></span><br><span class="line"><span class="comment"> *         Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment"> *         for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment"> *             int complement = target - nums[i];</span></span><br><span class="line"><span class="comment"> *             if (map.containsKey(complement)) &#123;</span></span><br><span class="line"><span class="comment"> *                 return new int[] &#123; map.get(complement), i &#125;;</span></span><br><span class="line"><span class="comment"> *             &#125;</span></span><br><span class="line"><span class="comment"> *             map.put(nums[i], i);</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *         throw new IllegalArgumentException("No two sum solution");</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>Processing目录下组件了解</title>
    <link href="http://yoursite.com/2020/07/15/2020-07-15-Processing%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%BB%84%E4%BB%B6%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/15/2020-07-15-Processing%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%BB%84%E4%BB%B6%E4%BA%86%E8%A7%A3/</id>
    <published>2020-07-15T15:36:00.000Z</published>
    <updated>2020-07-15T15:39:14.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Processing目录组件"><a href="#Processing目录组件" class="headerlink" title="Processing目录组件"></a>Processing目录组件</h2><p>目标：了解Processing目录下组件如何使用。(主要完成对数据的预处理工作)</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrmisyib5j30720a1wei.jpg" alt="png"></p><p>查看方法：选中组件按<code>F1</code>，或者在<code>帮助</code>的<code>help content</code>中搜索组件名。</p><blockquote><p>tmap/tAggregateRow/tFilterRow/tSplitRow</p></blockquote><h2 id="tAggregateRow"><a href="#tAggregateRow" class="headerlink" title="tAggregateRow"></a>tAggregateRow</h2><p><code>接收流并基于一个或多个列进行聚合</code></p><p>对于每个输出行，都提供了聚合键和相关集合操作(min,max,sum…)。</p><p>可用于以下job框架：</p><ul><li><p><code>Standard</code>: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help/guide/components/en/zqy1572276418115.html#nnb1550477842274" target="_blank" rel="noopener">tAggregateRow Standard properties</a>.</p><p>The component in this framework is available in all <a href="https://www.talend.com/products/?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend products</a>.</p></li><li><p><code>MapReduce</code>: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help/guide/components/en/zqy1572276418115.html#mmh1550477842446" target="_blank" rel="noopener">tAggregateRow MapReduce properties (deprecated)</a>.</p><p>The component in this framework is available in all <a href="https://www.talend.com/products/big-data/big-data-compare-all?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">subscription-based Talend products with Big Data</a>                   and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li><li><p><code>Spark Batch</code>: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help/guide/components/en/zqy1572276418115.html#npy1550477842603" target="_blank" rel="noopener">tAggregateRow properties for Apache Spark Batch</a>.</p><p>The component in this framework is available in all <a href="https://www.talend.com/products/big-data/big-data-compare-all?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">subscription-based Talend products with Big Data</a>                   and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li><li><p><code>Spark Streaming</code>: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help/guide/components/en/zqy1572276418115.html#snh1550477851873" target="_blank" rel="noopener">tAggregateRow properties for Apache Spark Streaming</a>.</p><p>This component is available in <a href="https://www.talend.com/products/big-data/real-time-big-data/?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Real Time Big Data Platform</a> and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li><li><p><code>Storm</code>: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help/guide/components/en/zqy1572276418115.html#sbd1550477851951" target="_blank" rel="noopener">tAggregateRow Storm properties (deprecated)</a>. </p><p>This component is available in <a href="https://www.talend.com/products/big-data/real-time-big-data/?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Real Time Big Data Platform</a> and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li></ul><p>该组件处理数据流，因此需要输入和输出，所以其被定义为中间步骤。</p><p>通常，<code>tAggregateRow</code>与<code>tSortRow</code>结合使用。</p><h4 id="Demo1-聚合和排序数据"><a href="#Demo1-聚合和排序数据" class="headerlink" title="Demo1 - 聚合和排序数据"></a>Demo1 - 聚合和排序数据</h4><p>示例：使用Talend组件来对学生的综合分数进行聚合，并基于学生的姓名对聚合的分数进行排序。</p><p>思路：创建作业，使用tAggregateRow组件聚合学生的综合分数，然后使用tSortRow组件对聚合的数据进行排序，最后在控制台中显示聚合和排序的数据。</p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrow02orkj30kp04haa3.jpg" alt="png"></p></li><li><p>配置job.</p><p>①组件tFixedFlowInput编辑schema，添加name字段和score字段。</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggroypyekkj30q30dft9l.jpg" alt="png"></p><p>Mode区域，选择Use Inline Content(delimited file),并在内容框填入输入数据.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Peter;92</span><br><span class="line">James;93</span><br><span class="line">Thomas;91</span><br><span class="line">Peter;94</span><br><span class="line">James;96</span><br><span class="line">Thomas;95</span><br><span class="line">Peter;96</span><br><span class="line">James;92</span><br><span class="line">Thomas;98</span><br><span class="line">Peter;95</span><br><span class="line">James;96</span><br><span class="line">Thomas;93</span><br><span class="line">Peter;98</span><br><span class="line">James;97</span><br><span class="line">Thomas;95</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrp0v33ohj30ln0h4wf7.jpg" alt="png"></p><p>   ②组件tAggregateRow编辑schema,Output添加5个列.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrp5mlu9fj30rc0awdgc.jpg" alt="png"></p><p>   Group by中添加一行，并选择Output column和Input column position的<code>name</code>字段对输入数据基于<code>name</code>列进行分组。</p><p>   并在Operations table中添加四行来定义要执行的操作，<code>sum</code>,<code>average</code>,<code>max</code>,<code>min</code>。然后都从Input column position中选择<code>score</code>列字段来基于它对输入数据进行聚合。</p><p>   ③组件tSortRow，在Criteria table中添加一行，并指定为排序操作需要基于的列。本例中为<code>name</code>列，然后选择<code>按照字母排序</code>，<code>升序</code>排列。</p><p>   ④组件tLogRow，在Basic settings的Mode中，选择Table(print values in cells of a table)来打印结果。</p><ol start="3"><li><p>运行job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrpmdawajj31hc0smq9x.jpg" alt="png"></p></li></ol><h2 id="tFilterRow"><a href="#tFilterRow" class="headerlink" title="tFilterRow"></a>tFilterRow</h2><p><code>通过在选定的列上设置一个或多个条件来筛选输入行</code></p><p>可用于以下job框架：</p><ul><li><p>Standard: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help.filterrow/guide/components/en/lkv1572276420081.html#koe1550478042642" target="_blank" rel="noopener">tFilterRow Standard properties</a>.</p><p>The component in this framework is available in all <a href="https://www.talend.com/products/?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend                products</a>.</p></li><li><p>MapReduce: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help.filterrow/guide/components/en/lkv1572276420081.html#nip1550478042752" target="_blank" rel="noopener">tFilterRow MapReduce properties (deprecated)</a>.</p><p>The component in this framework is available in all <a href="https://www.talend.com/products/big-data/big-data-compare-all?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">subscription-based Talend products with Big Data</a>                   and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li><li><p>Spark Batch:            see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help.filterrow/guide/components/en/lkv1572276420081.html#fjg1550478042830" target="_blank" rel="noopener">tFilterRow properties for Apache Spark Batch</a>.</p><p>The component in this framework is available in all <a href="https://www.talend.com/products/big-data/big-data-compare-all?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">subscription-based Talend products with Big Data</a>                   and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li><li><p>Spark Streaming:                see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help.filterrow/guide/components/en/lkv1572276420081.html#xqd1550478042939" target="_blank" rel="noopener">tFilterRow properties for Apache Spark Streaming</a>.</p><p>This component is available in <a href="https://www.talend.com/products/big-data/real-time-big-data/?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Real Time Big Data Platform</a> and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li><li><p>Storm: see <a href="http://127.0.0.1:59832/help/ntopic/org.talend.help.filterrow/guide/components/en/lkv1572276420081.html#ejs1550478043064" target="_blank" rel="noopener">tFilterRow Storm properties (deprecated)</a>.</p><p>This component is available in <a href="https://www.talend.com/products/big-data/real-time-big-data/?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Real Time Big Data Platform</a> and <a href="https://www.talend.com/products/data-fabric?utm_medium=help&utm_source=help_content" target="_blank" rel="noopener">Talend Data Fabric</a>.</p></li></ul><h4 id="Demo1-使用简单的条件筛选名称列表"><a href="#Demo1-使用简单的条件筛选名称列表" class="headerlink" title="Demo1 - 使用简单的条件筛选名称列表"></a>Demo1 - 使用简单的条件筛选名称列表</h4><p>示例：创建工作使用简单的条件来对记录列表进行筛选，并将输出两个表：第一个表将列出所有last name少于9个字母并且年龄在10-80岁间的所有男性；第二个表将列出所有不符合筛选要求的记录。同时每个未满足筛选条件的记录还会有一条错误信息来说明该记录为何被剔除。</p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrr90g2ggj30fs07r74h.jpg" alt="png"></p></li><li><p>配置job.</p><p>①tFixedFlowInput组件.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrrbqmdadj30eu0awglu.jpg" alt="png"></p><p>选择Use Inline Content(delimited file)选项，并将输入数据填入内容框.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Van Buren;M;73;Chicago</span><br><span class="line">Adams;M;40;Albany</span><br><span class="line">Jefferson;F;66;New York</span><br><span class="line">Adams;M;9;Albany</span><br><span class="line">Jefferson;M;30;Chicago</span><br><span class="line">Carter;F;26;Chicago</span><br><span class="line">Harrison;M;40;New York</span><br><span class="line">Roosevelt;F;15;Chicago</span><br><span class="line">Monroe;M;8;Boston</span><br><span class="line">Arthur;M;20;Albany</span><br><span class="line">Pierce;M;18;New York</span><br><span class="line">Quincy;F;83;Albany</span><br><span class="line">McKinley;M;70;Boston</span><br><span class="line">Coolidge;M;4;Chicago</span><br><span class="line">Monroe;M;60;Chicago</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrrdub3d7j30kn0fwdgn.jpg" alt=""></p><p>   ② tFilterRow组件</p><p>   填入筛选条件，并选择逻辑操作符<code>And</code>表示兼顾所有筛选条件.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrrhbhhw9j30mz0g4750.jpg" alt="png"></p><p>   ③ tLogRow组件</p><p>   选择<code>Table(print values in cells of a table)</code>.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrrmf3efnj30ip0e33z1.jpg" alt="png"></p><h4 id="Demo2-通过不同的逻辑操作符过滤名称列表"><a href="#Demo2-通过不同的逻辑操作符过滤名称列表" class="headerlink" title="Demo2 - 通过不同的逻辑操作符过滤名称列表"></a>Demo2 - 通过不同的逻辑操作符过滤名称列表</h4><p>示例：基于上一个场景，进一步过滤输入数据，以便只接受来自纽约和芝加哥的人员的记录。在不更改前一个场景中所定义的筛选器设置情况下，在此场景中添加了高级条件，以便于在同一个tFilterRow组件中同时启用逻辑与和逻辑或操作。</p><ol><li><p>复制上一步的job.</p></li><li><p>使用<code>高级模式</code>，并键入下列代码来补充筛选条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input_row.City.equals(&quot;Chicago&quot;) || input_row.City.equals(&quot;New York&quot;)</span><br></pre></td></tr></table></figure></li></ol><p>   其中使用了逻辑操作符OR。</p><ol start="3"><li><p>保存job并运行：</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrt6xbzkgj30lw0fi74t.jpg" alt="png"></p></li></ol><h2 id="tSplitRow"><a href="#tSplitRow" class="headerlink" title="tSplitRow"></a>tSplitRow</h2><p><code>将一个输入行分割为多个输出行</code></p><h4 id="Demo1-Splitting-one-row-into-two-rows"><a href="#Demo1-Splitting-one-row-into-two-rows" class="headerlink" title="Demo1 - Splitting one row into two rows"></a>Demo1 - Splitting one row into two rows</h4><p>示例：一行包含两个公司信息的数据被分为两行。</p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrtksfop6j30g203l3yj.jpg" alt="png"></p></li><li><p>配置job.</p><p>① 组件tFixedFlowInput.</p><p>选择Mode中的Use Inline Content(delimited file)，并填入输入数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Talend;LA;California;537;5thAvenue;IT;Lionbridge;Memphis;Tennessee;537;LincolnRoad;IT Service;</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrto2eluij30lh0doaai.jpg" alt="png"></p><p>   Schema添加字段.<img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrtse5b4zj30h70ewdg9.jpg" alt="png"></p><p>   ② 组件tSplitRow.</p><p>   使用<code>Edit Schema</code>为output data设置schema.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggru4nnr28j30qm0eegmd.jpg" alt=".png"></p><p>   在列映射中填入下列值：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Company: row1.Company, row1.Company2;</span><br><span class="line">Country: row1.CountryCode, row1.CountryCode2;</span><br><span class="line">Address: row1.Street+&quot;,&quot;+row1.City+&quot;,&quot;+row1.State, row1.Street2+&quot;,&quot;+row1.City2+&quot;,&quot;+row1.State2;</span><br><span class="line">Industry: row1.Industry, row1.Industry2;</span><br></pre></td></tr></table></figure><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggruhjx8xtj30xq07s0ta.jpg" alt="png"></p><p>   ③ tLogRow组件.</p><p>   选择Table(print values in cells of a table), 然后点击<code>同步列</code>。</p><ol start="3"><li><p>保存job并运行.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggruqb8jblj30od0pi0tt.jpg" alt="png"></p></li></ol><h2 id="tMap"><a href="#tMap" class="headerlink" title="tMap"></a>tMap</h2><p><code>将数据从单个或多个源转换和路由到单个或多个目的地</code></p><h4 id="Demo-电影导演信息整理"><a href="#Demo-电影导演信息整理" class="headerlink" title="Demo - 电影导演信息整理"></a>Demo - 电影导演信息整理</h4><p><a href="https://saipeng-li.github.io/2020/07/14/2020-07-14-Talend-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%BB%BD%E4%BD%9C%E4%B8%9A/" target="_blank" rel="noopener">https://saipeng-li.github.io/2020/07/14/2020-07-14-Talend-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%BB%BD%E4%BD%9C%E4%B8%9A/</a> </p><h2 id="tAggregateSortedRow-amp-tSortRow"><a href="#tAggregateSortedRow-amp-tSortRow" class="headerlink" title="tAggregateSortedRow &amp; tSortRow"></a>tAggregateSortedRow &amp; tSortRow</h2><p><code>tAggregateSortedRow: 根据一组操作聚合已排序的输入数据得到输出列。每个输出列都由所需的多行，要执行的操作和要从中获取数据的输入列所配置，以便更好地进行数据聚合。</code></p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggry8r2s3cj30pd0480sw.jpg" alt="png"></p></li><li><p>配置job.</p><p>① tFixedFlowInput组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1;Thomas;28;Component Team</span><br><span class="line">2;Harry;32;Doc Team</span><br><span class="line">3;John;26;Component Team</span><br><span class="line">4;Nicolas;27;QA Team</span><br><span class="line">5;George;24;Component Team</span><br><span class="line">6;Peter;30;Doc Team</span><br><span class="line">7;Teddy;23;QA Team</span><br><span class="line">8;Jame;26;Component Team</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrychsaoyj30pd0ao0t6.jpg" alt="png"></p><p>   编辑schema.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrydug5pej30hs0awt8z.jpg" alt="png"></p><p>   ② tSortRow组件.<img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggryge4q4tj30qd0c70ta.jpg" alt="png"></p><p>   ③ tLogRow组件.</p><p>   选择Table(print values in cells of a table).</p><p>   ④ tAggregateSortedRow组件</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggryk4lvh9j30rc0awq3h.jpg" alt="png"></p><p>   分别列出操作<code>AggCount</code>,<code>MinAge</code>,<code>MaxAge</code>,<code>AvgAge</code>.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrymmqvu9j30q20cc0td.jpg" alt="png"></p><p>   ⑤ tLogRow组件</p><p>   选择Table(print values in cells of a table).</p><ol start="3"><li><p>保存job并运行.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggryt8psdyj30jb0hggmb.jpg" alt="png"></p></li></ol><h2 id="tConvertType"><a href="#tConvertType" class="headerlink" title="tConvertType"></a>tConvertType</h2><p><code>将一种Talend java类型自动转换为另一种类型，从而避免编译错误.</code></p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggryzes7a7j30jq03gglo.jpg" alt="png"></p></li><li><p>配置job.</p><p>① tFileInputDelimited组件.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrz2g2iv3j306q030a9x.jpg" alt="png"></p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrz430816j30lu082t94.jpg" alt="png"></p><p>编辑schema.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrz5tguloj30ic0awq37.jpg" alt="png"></p><p>② tConvertType组件</p><p>选择内置(<code>Built in</code>)schema并点击<code>列同步</code>，然后编辑schema.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrz7yzeltj30rc0aw74r.jpg" alt="png"></p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrz9ryehbj30mc07kaad.jpg" alt="png"></p><p>③ tMap组件.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrzdinnvjj30sx0smdh1.jpg" alt="png"></p><p>④ tLogRow组件.</p><p>选择Table(print values in cells of a table)</p></li><li><p>保存job并运行.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrzv4auk1j30h409hweq.jpg" alt="png"></p></li></ol><h2 id="tExternalSortRow"><a href="#tExternalSortRow" class="headerlink" title="tExternalSortRow"></a>tExternalSortRow</h2><p><code>使用外部排序应用程序，根据排序类型和顺序，基于一列或几列来对输入数据进行排序.</code></p><h2 id="tFilterColumns"><a href="#tFilterColumns" class="headerlink" title="tFilterColumns"></a>tFilterColumns</h2><p><code>通过对列排序、删除不需要的列或添加新列来同质化模式(schema).</code></p><h2 id="tJoin"><a href="#tJoin" class="headerlink" title="tJoin"></a>tJoin</h2><p><code>在主数据流和查找流之间执行内部或外部连接.</code></p><p>tJoin通过在几个列上执行精准匹配来连接两个表。它将主流中的列于查找流中的列进行比较，并输出主流数据和/或被拒绝的数据。</p><h4 id="Demo-对两列进行精确匹配，并输出主数据和被拒绝数据"><a href="#Demo-对两列进行精确匹配，并输出主数据和被拒绝数据" class="headerlink" title="Demo - 对两列进行精确匹配，并输出主数据和被拒绝数据"></a>Demo - 对两列进行精确匹配，并输出主数据和被拒绝数据</h4><p>示例：在引用的输入文件数据中的firstnameClient列，以及lastnameClient列进行精确匹配。精确匹配的输出写在两个单独的文件，精确的数据写在一个Excel文件中，不精确的数据写在一个分隔的文件中。</p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs0hnvjyuj30dw06vjru.jpg" alt="png"></p></li><li><p>配置job.</p><p>① tFileInputDelimited组件(Main_Input).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;people.csv</span><br><span class="line"></span><br><span class="line">FirstName;LastName;HouseNo;Street;City</span><br><span class="line">Gerald;Roosevelt;48;Fairview Avenue;Oklahoma City</span><br><span class="line">Benjamin;Harrison;27;Katella Avenue;Little Rock</span><br><span class="line">Bob;Clinton;11;Bowles Avenue;Raleigh</span><br><span class="line">James;Quincy;45;Cerrillos Road;Saint Paul</span><br><span class="line">Gerald;Harrison;27;Katella Avenue;Little Rock</span><br><span class="line">Harry;Madison;85;Santa Monica Road;Raleigh</span><br><span class="line">Helen;Roosevelt;48;Fairview Avenue;Oklahoma City</span><br><span class="line">Mary;Clinton;11;Bowles Avenue;Raleigh</span><br><span class="line">Cathey;Quincy;45;Cerrillos Road;Saint Paul</span><br><span class="line">John;Smith;64;Market Street;Helena</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs0djc4soj30kx09rjrt.jpg" alt="png"></p><p>   编辑schema.</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs0gvsz02j30dq08ddgk.jpg" alt="png"></p><p>   ② tFileInputDelimited组件(Ref_Input).</p><p>   编辑schema,仅定义一个dynamic schema列：<code>FamilyInfo</code>。</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; the reference input file.</span><br><span class="line"></span><br><span class="line">LastName;HouseNo;Street;City</span><br><span class="line">Clinton;11;Bowles Avenue;Raleigh</span><br><span class="line">Quincy;45;Cerrillos Road;Saint Paul</span><br><span class="line">Smith;64;Market Street;Helena</span><br></pre></td></tr></table></figure><p>   ③ tJoin组件</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs0q1gj6pj30kq0913zj.jpg" alt="png"></p><p>   在键定义区域，选择你希望的输入列属性匹配的查询列属性，本例中<code>FamilyInfo</code>与<code>row2.FamilyInfo</code>进行匹配。</p><p>   <img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs0plmwmwj30fu093q3v.jpg" alt="png"></p><p>   确保<code>Inner join(with reject output)</code>|<code>内连接(带有拒绝输出)</code>被选中。</p><p>   ④ tLogRow组件</p><ol start="3"><li><p>保存job并运行。</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs0vi2xblj30fd0c1wg6.jpg" alt="png"></p></li></ol><h2 id="tReplace"><a href="#tReplace" class="headerlink" title="tReplace"></a>tReplace</h2><p><code>在进一步处理之前清除所有文件. 在定义的输入列中执行搜索和替换操作.</code></p><h4 id="Demo-清理和过滤CSV文件"><a href="#Demo-清理和过滤CSV文件" class="headerlink" title="Demo - 清理和过滤CSV文件"></a>Demo - 清理和过滤CSV文件</h4><p>示例： 在CSV文件中搜索并替换各种拼写错误和缺陷，然后执行列过滤并生成带有最终输出的新csv文件。</p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs114sxb5j30ex0583yt.jpg" alt="png"></p></li><li><p>配置job.</p><p>① tFileInputDelimited组件.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs12jr7gzj30f2053q39.jpg" alt="png"></p><p>② tReplace组件.</p><p>文件中包含以下错误：</p><p><code>Nikson</code> -&gt; <code>Nikxon</code></p><p><code>streat</code> -&gt; <code>Street</code>  …</p><p>在tReplace组件中设置search&amp;replace参数:</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs15d0sesj30g206haam.jpg" alt="png"></p><p>③ tFilterColumn组件.</p><p>tFilterColumn组件中有一个模式编辑器，允许根据输入schema的列名构建输出schema。本例中添加一个名为empty_field的新列，并更改输入schema列的顺序，得到如下schema:<code>empty_field</code>,<code>Firstname</code>,<code>Name</code>,<code>Street</code>,<code>Amount</code>.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1afc68yj30q709uabg.jpg" alt="png"></p><p>④tFileOutputDelimited组件</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1f0elaaj30dq045dg1.jpg" alt="png"></p></li><li><p>保存job并运行</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1fhg76pj30b303owes.jpg" alt="png"></p></li></ol><h2 id="tSampleRow"><a href="#tSampleRow" class="headerlink" title="tSampleRow"></a>tSampleRow</h2><p><code>根据单行列表和/或多行列表选择行.</code></p><h4 id="Demo-过滤行和行组"><a href="#Demo-过滤行和行组" class="headerlink" title="Demo - 过滤行和行组"></a>Demo - 过滤行和行组</h4><p>示例：<code>tRowGenerator</code>用于创建随机条目，这些随机条目被直接发送到<code>tSampleRow</code>,在<code>tSampleRow</code>中根据定义的范围对它们进行过滤。本例中，假设输入流包含销售人员姓名、他们各自销售的产品数量以及他们在企业中的工作年限。</p><ol><li><p>创建job.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1jey31tj30as030t8q.jpg" alt="png"></p></li><li><p>配置job.</p><p>① tRowgenerator组件.</p><p>编辑schema.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1oijvtnj30bs07bgm9.jpg" alt="png"></p><p>在RowGenerator Editor中, 在<code>Number of Rows for RowGenerator</code>中指定希望生成的行数。</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1q9bz2lj30h205fdgg.jpg" alt="png"></p><p>② tSampleRow组件.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1re3jh5j30dc05kt93.jpg" alt="png"></p><p>设置<code>Built-In</code>的schema, 并点击<code>列同步</code>。在<code>Range</code>中，设置筛选器进行行选择。本例中，选择了第1、5、9-12的一组行。</p></li><li><p>保存job并运行.</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggs1up9zdtj30cg05rmxm.jpg" alt="png"></p></li></ol><h2 id="tXMLMap"><a href="#tXMLMap" class="headerlink" title="tXMLMap"></a>tXMLMap</h2><p><code>将数据从单个或多个源转换和路由到单个或多个目的地.</code></p><p><code>tXMLMap是一个经过优化的高级组件，用于转换和路由XML数据流(文档类型的数据)，特别是在处理大量XML数据源时.</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Processing目录组件&quot;&gt;&lt;a href=&quot;#Processing目录组件&quot; class=&quot;headerlink&quot; title=&quot;Processing目录组件&quot;&gt;&lt;/a&gt;Processing目录组件&lt;/h2&gt;&lt;p&gt;目标：了解Processing目录下组件如何
      
    
    </summary>
    
    
      <category term="Talend" scheme="http://yoursite.com/categories/Talend/"/>
    
    
      <category term="Talend" scheme="http://yoursite.com/tags/Talend/"/>
    
  </entry>
  
  <entry>
    <title>组件入门</title>
    <link href="http://yoursite.com/2020/07/15/2020-07-16-Talend%E7%BB%84%E4%BB%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/07/15/2020-07-16-Talend%E7%BB%84%E4%BB%B6%E5%85%A5%E9%97%A8/</id>
    <published>2020-07-15T05:36:00.000Z</published>
    <updated>2020-07-15T05:43:47.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Talend-——-组件入门"><a href="#Talend-——-组件入门" class="headerlink" title="Talend —— 组件入门"></a>Talend —— 组件入门</h1><blockquote><p><a href="https://talend.github.io/component-runtime/main/1.1.22/tutorial-create-my-first-component.html" target="_blank" rel="noopener">https://talend.github.io/component-runtime/main/1.1.22/tutorial-create-my-first-component.html</a> </p></blockquote><h2 id="Talend组件套件"><a href="#Talend组件套件" class="headerlink" title="Talend组件套件"></a>Talend组件套件</h2><p>Talend Component Kit是个Java框架，从两个级别上简化组件的开发：</p><ul><li><strong>运行时</strong>：运行时是关于将特定的组件代码注入作业或管道中。该框架有助于尽可能地统一在数据集成（DI）和BEAM环境中运行所需的代码。 </li><li><strong>图形界面</strong>：该框架有助于统一所需的代码，以便能够在浏览器（Web）或基于Eclipse的Studio（SWT）中呈现组件。 </li></ul><p>开发的大部分内容是作为Maven或Gradle项目进行的，并且需要诸如IntelliJ之类的专用工具。</p><p>组件套件由以下组件制成：</p><ul><li>入门程序（Starter）是一个图形界面，可用于定义开发项目的框架。</li><li>用于实现组件UI和运行时的API。</li><li>开发工具：Maven和Gradle包装器，验证规则，打包，Web预览等。</li><li>基于JUnit 4和5的测试套件。</li></ul><p>通过在基本开发环境中使用此工具，可以开始创建组件。</p><h2 id="Talend组件套件方法论"><a href="#Talend组件套件方法论" class="headerlink" title="Talend组件套件方法论"></a>Talend组件套件方法论</h2><p>使用组件工具包框架开发新组件包括：</p><ol><li>使用<a href="https://starter-toolkit.talend.io/" target="_blank" rel="noopener">启动程序</a>或<a href="https://talend.github.io/component-runtime/main/1.1.22/installing-talend-intellij-plugin.html" target="_blank" rel="noopener">Talend IntelliJ插件</a><a href="https://talend.github.io/component-runtime/main/1.1.22/index-generating-project.html" target="_blank" rel="noopener">创建项目</a>。此步骤允许构建项目的框架。它包括：<ol><li>为项目中的每个组件定义常规配置模型</li><li>从入门者生成和下载项目档案</li><li>编译项目</li></ol></li><li>在您的IDE中导入已编译的项目。如果您已经使用IntelliJ插件生成了项目，则不需要此步骤。</li><li><a href="https://talend.github.io/component-runtime/main/1.1.22/index-creating-components.html" target="_blank" rel="noopener">实现组件</a>，包括：<ol><li>通过指定组件的元数据来注册组件：族，类别，版本，图标，类型和名称。</li><li>定义组件的布局和可配置部分</li><li>定义组件的执行逻辑，也称为运行时。</li></ol></li><li><a href="https://talend.github.io/component-runtime/main/1.1.22/index-testing-components.html" target="_blank" rel="noopener">测试组件</a>。</li><li><a href="https://talend.github.io/component-runtime/main/1.1.22/index-deploying-components.html" target="_blank" rel="noopener">将组件部署</a>到Talend Studio或Cloud应用程序。</li></ol><h2 id="组件类型"><a href="#组件类型" class="headerlink" title="组件类型"></a>组件类型</h2><p>组件共有三种类型，每种类型都有其特殊性，尤其是在运行时。</p><ul><li><strong>输入组件</strong>：从定义的源检索要处理的数据。输入组件由以下组成：<ul><li><strong>组件的执行逻辑</strong>，由<code>Mapper</code>或<code>Emitter</code>类表示。</li><li><strong>组件的源逻辑</strong>，由<code>Source</code>类表示。</li><li><strong>组件的布局和最终用户在使用组件时需要提供的配置</strong>（由<code>Configuration</code>类定义）。所有输入组件都必须在其配置中指定一个数据集，并且每个数据集都必须使用一个数据存储。</li></ul></li><li><strong>处理器</strong>：处理和转换数据。处理器由以下材料制成：<ul><li><strong>组件的执行逻辑</strong>，描述如何处理其接收的每个记录或记录的批次。它还描述了如何将记录传递到其输出连接。此逻辑在<code>Processor</code>类中定义。</li><li><strong>组件的布局和最终用户在使用组件时需要提供的配置</strong>（由<code>Configuration</code>类定义）。</li></ul></li><li><strong>输出组件</strong>：将处理后的数据发送到定义的目的地。输出组件由以下组成：<ul><li><strong>组件的执行逻辑</strong>，描述如何处理其接收的每个记录或记录的批次。此逻辑在<code>Output</code>类中定义。与处理器不同，输出组件是执行的最后一个组件，不返回任何数据。</li><li><strong>组件的布局和最终用户在使用组件时需要提供的配置</strong>（由<code>Configuration</code>类定义）。所有输入组件都必须在其配置中指定一个数据集，并且每个数据集都必须使用一个数据存储。</li></ul></li></ul><h2 id="创建第一个组件"><a href="#创建第一个组件" class="headerlink" title="创建第一个组件"></a>创建第一个组件</h2><p>本例所创建的组件是一个简单的处理器组件，该组件<strong>从上一组件接收数据并将其显示在日志中，以及用户输入的其他信息</strong>。</p><h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h3><ul><li>Java JDK 1.8或更高版本;</li><li>Talend Open Studio;</li><li>下载并安装IntelliJ;</li><li><a href="https://talend.github.io/component-runtime/main/1.1.22/installing-talend-intellij-plugin.html" target="_blank" rel="noopener">下载IntelliJ的Talend Component Kit插件</a>.</li></ul><h3 id="生成一个简单的组件项目"><a href="#生成一个简单的组件项目" class="headerlink" title="生成一个简单的组件项目"></a>生成一个简单的组件项目</h3><ol><li><p>启动IntelliJ并创建一个新项目。在可用选项中，您应该看到<strong>Talend Component</strong>。 </p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggql2eqatzj30js0et0ui.jpg" alt="png"></p></li><li><p>确保已选择<strong>Project SDK</strong>。然后，选择<strong>Talend组件</strong>，然后单击<strong>下一步</strong>。<br>在<strong>拓蓝组件工具包入门</strong>打开。</p></li><li><p>输入项目详细信息。这里的目标是定义组件和项目元数据。更改默认值，如下所示：</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggql7qkrbxj30y10o2di9.jpg" alt="png"></p><ul><li>该<strong>组件家庭</strong>和<strong>类别</strong>将在Talend Open Studio的后来被用来寻找新的组件。</li><li>项目元数据主要用于标识项目结构。一种常见的做法是将默认值中的“公司”替换为您自己的值，例如域名。</li></ul></li><li><p>填充完元数据后，选择<strong>添加组件</strong>。<strong>Talend组件工具包启动器</strong>中将显示一个新屏幕，可让您定义组件的常规配置。默认情况下，新组件是处理器， </p></li><li><p>输入组件的有效Java名称。例如，<strong>Logger</strong>。 </p></li><li><p>选择<strong>配置模型，</strong>然后添加一个名为的字符串字段<code>level</code>。该输入字段将在组件配置中用于输入其他信息以显示在日志中。</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqlt0e39zj314j0ndgnm.jpg" alt="png"></p></li><li><p>在“ <strong>输入/输出”</strong>部分中，单击默认的<strong>MAIN</strong>输入分支以访问其详细信息，并确保将记录模型设置为<strong>Generic</strong>。保留分支<strong>名称</strong>为其默认<code>MAIN</code>值。 </p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqlu19idaj314j0ndtak.jpg" alt="png"></p></li><li><p>对默认的<strong>MAIN</strong>输出分支重复相同的步骤。</p><blockquote><p>因为组件是处理器，所以默认情况下它具有输出分支。没有任何输出分支的处理器被视为输出组件。选择“ <strong>激活IO”</strong>选项时，可以创建输出组件。 </p></blockquote></li><li><p>单击“ <strong>下一步”</strong>，检查项目的名称和位置，然后单击“ <strong>完成”</strong>以在IDE中生成项目。 </p></li></ol><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqlw3esrkj31hc0smnpd.jpg" alt="png"></p><p>至此，您的组件在技术上已经准备好进行编译并部署到Talend Open Studio。</p><ul><li>根据在<strong>Talend Component Kit Starter中</strong>定义的组件的名称和类型，生成了两个类：<ul><li><code>LoggerProcessor</code>是定义组件逻辑的地方;</li><li><code>LoggerProcessorConfiguration</code>是定义组件布局和可配置字段的位置，其中包括在组件的配置模型中较早定义的<code>level</code>字符串字段.</li></ul></li><li>该<strong>package-info.java</strong>文件包含了在<strong>Talend组件工具包入门</strong>中所定义的组件元数据，如家庭和类别。</li><li>您还可以注意到，树结构中的元素是以在<strong>Talend Component Kit Starter</strong>定义的项目元数据命名的。</li></ul><p>如果以后需要编辑组件的配置，逻辑和元数据，则这些文件是起点。</p><h3 id="将组件编译并部署到Talend-Open-Studio"><a href="#将组件编译并部署到Talend-Open-Studio" class="headerlink" title="将组件编译并部署到Talend Open Studio"></a>将组件编译并部署到Talend Open Studio</h3><p>无需对组件代码进行任何修改，就可以编译项目并将组件部署到Talend Open Studio的本地实例。</p><p>这样，很容易检查Studio中可见的内容是否符合预期。</p><blockquote><p>在开始运行任何命令之前，请确保Talend Open Studio未运行。 </p></blockquote><ol><li><p>从IntelliJ中的组件项目中，打开一个终端，并确保所选目录是项目的根目录。</p></li><li><p>通过运行以下命令编译项目：<code>mvnw clean install</code>。 该<code>mvnw</code>命令引用了Talend Component Kit随附的Maven包装器。它允许为您的项目使用正确版本的Maven，而无需事先手动安装。等效包装器可用于Gradle。</p><p>IDEA中配置好Maven环境： </p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqrh47ej7j30y50ohgnj.jpg" alt="png"></p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqrhpixhqj31hc0sm79v.jpg" alt="png"></p></li><li><p>一旦执行了命令，并且在终端中看到了<strong>BUILD SUCCESS</strong>，请使用以下命令将组件部署到Talend Open Studio的本地实例： </p><p><code>mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=&quot;&lt;path to Talend Open Studio home&gt;&quot;</code> </p><p>如本例：</p><p><code>mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=&quot;F:\Talend-Pro\studio-se-master\build\talend.studio.tos.di.product\target\products\org.talend.studio.tos.di.product\win32\win32\TOS_DI-20200629_1603-V7.4.1SNAPSHOT&quot;</code></p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqrm37g8jj31hc0smdl8.jpg" alt="png"></p></li><li><p>确保构建成功。 </p></li><li><p>打开<code>Talend Open Studio</code>并创建一个新的Job：</p><ul><li>新组件位于<strong>Talend组件工具包入门版</strong>中指定的新系列和类别中。您可以将其添加到作业中并打开其设置。</li><li>请注意，出现了在<strong>Talend Component Kit Starter中</strong>组件的配置模型中指定的<code>level</code>字段。</li></ul><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqv0jcjubj31hc0sm77u.jpg" alt="png"></p><p>此时，您的新组件可在Talend Open Studio中使用，并且其可配置部分已经设置。但是组件逻辑仍有待定义。</p></li></ol><h3 id="编辑组件"><a href="#编辑组件" class="headerlink" title="编辑组件"></a>编辑组件</h3><p>现在，您可以编辑组件以实现简单的逻辑：<strong>读取组件输入分支中包含的数据，以向其显示作业的执行日志。组件的级别字段的值也需要显示并更改为大写</strong>。 </p><ol><li><p>保存先前创建的作业，然后关闭Talend Open Studio。 </p></li><li><p>返回IntelliJ，打开<strong>LoggerProcessor</strong>类。这是可以定义组件逻辑的类。</p></li><li><p>寻找<code>@ElementListener</code>方法。它已经存在，并且引用了<strong>Talend Component Kit Starter中</strong>定义的默认输入分支，但尚未完成。 </p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqv6anrpwj30te05lt92.jpg" alt=""></p></li><li><p>为了能够将输入中的数据记录到控制台，请添加以下行： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Log to the console </span></span><br><span class="line">System.out.println(<span class="string">"["</span>+configuration.getLevel().toUpperCase()+<span class="string">"] "</span>+defaultInput);</span><br></pre></td></tr></table></figure></li></ol><p>   <code>@ElementListener</code>现在，该方法如下所示： </p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ElementListener</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @Input <span class="keyword">final</span> Record defaultInput,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Output <span class="keyword">final</span> OutputEmitter&lt;Record&gt; defaultOutput)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this is the method allowing you to handle the input(s) and emit the output(s)</span></span><br><span class="line">        <span class="comment">// after some custom logic you put here, to send a value to next element you can use an</span></span><br><span class="line">        <span class="comment">// output parameter and call emit(value).</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Log to the console</span></span><br><span class="line">    System.out.println(<span class="string">"["</span>+configuration.getLevel().toUpperCase()+<span class="string">"] "</span>+defaultInput);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>再次打开终端以编译项目并再次部署组件。为此，请依次运行以下两个命令:</p><ul><li><code>mvnw clean install</code></li></ul><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqvmilz4bj30wq0sm42t.jpg" alt="png"></p><ul><li>``mvnw talend-component:deploy-in-studio -Dtalend.component.studioHome=”<path to Talend Open Studio home>“ `</li></ul><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggqvosnrs1j30sr0smae6.jpg" alt="png"></p><p>现在应该将组件逻辑的更新部署到Studio。重新启动Studio后，您将准备构建作业并首次使用组件。 </p></li></ol><h3 id="使用组件构建工作"><a href="#使用组件构建工作" class="headerlink" title="使用组件构建工作"></a>使用组件构建工作</h3><p>现在可以使用该组件了，现在该创建作业并检查其行为是否符合预期。</p><ol><li>再次打开Talend Open Studio，然后转到先前创建的作业。新组件仍然存在。 </li><li>添加一个<strong>tRowGenerator</strong>组件并将其连接到记录器。 </li><li>双击<strong>tRowGenerator</strong>以指定要生成的数据：<ul><li>添加名为的第一列，<code>firstName</code>然后选择<strong>TalendDataGenerator.getFirstName（）</strong>函数。</li><li>添加第二个名为“ lastName”的列，然后选择<strong>TalendDataGenerator.getLastName（）</strong>函数。</li><li>将<strong>RowGenerator的行数</strong>设置为<code>10</code>。</li></ul></li></ol><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrl6w6kmnj30oq0gg0t5.jpg" alt="png"></p><ol start="4"><li><p>验证<strong>tRowGenerator</strong>配置。</p></li><li><p>打开<strong>TutorialFamilyLogger</strong>组件，并将<strong>level</strong>字段设置为<code>info</code>。</p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrl81oatuj30qo0smtbl.jpg" alt="png"></p></li><li><p>转到作业的<strong>“运行”</strong>选项卡并运行作业。 作业已执行。您可以在控制台中观察到已记录的10条生成的行中的每一行都已记录，并且<code>info</code>在记录器中输入的值也与每条记录一起以大写形式显示。 </p><p><img src="http://ww1.sinaimg.cn/large/007d8nWJgy1ggrlc3wbokj31hc0smgpv.jpg" alt="png"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Talend-——-组件入门&quot;&gt;&lt;a href=&quot;#Talend-——-组件入门&quot; class=&quot;headerlink&quot; title=&quot;Talend —— 组件入门&quot;&gt;&lt;/a&gt;Talend —— 组件入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Talend" scheme="http://yoursite.com/categories/Talend/"/>
    
    
      <category term="Talend" scheme="http://yoursite.com/tags/Talend/"/>
    
  </entry>
  
</feed>
