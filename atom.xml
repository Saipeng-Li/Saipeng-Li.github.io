<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝辞</title>
  
  <subtitle>Have a nice day!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-25T15:58:51.747Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhaoci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-54 Spiral Matrix</title>
    <link href="http://yoursite.com/2020/07/25/2020-07-25-LeetCode-54-Spiral%20Matrix/"/>
    <id>http://yoursite.com/2020/07/25/2020-07-25-LeetCode-54-Spiral%20Matrix/</id>
    <published>2020-07-25T05:50:00.000Z</published>
    <updated>2020-07-25T15:58:51.747Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入:</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3 ],</span></span><br><span class="line"><span class="comment">// [ 4, 5, 6 ],</span></span><br><span class="line"><span class="comment">// [ 7, 8, 9 ]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">//输出: [1,2,3,6,9,8,7,4,5]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入:</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [1, 2, 3, 4],</span></span><br><span class="line"><span class="comment">//  [5, 6, 7, 8],</span></span><br><span class="line"><span class="comment">//  [9,10,11,12]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">//输出: [1,2,3,4,8,12,11,10,9,5,6,7]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 </span></span><br><span class="line"><span class="comment">// [表情] 433 [表情] 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P54SpiralMatrix</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> P54SpiralMatrix().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.spiralOrder(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 2: 按层模拟</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以把矩阵看成若干层，首先输出最外层的元素，其次输出次外层的元素，直到输出最内层的元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 定义矩阵的第k层是到最近边界距离为k的所有顶点。例如：矩阵中的最外层元素都是第1层，次外层元素都是第2层。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 对于每层，从左上方开始以顺时针的顺序遍历所有元素，假设当前层的左上角位于(top,left)，右下角位于(bottom,right)，</span></span><br><span class="line"><span class="comment">     * 则按照如下顺序遍历当前层元素。</span></span><br><span class="line"><span class="comment">     * 1. 从左到右遍历上侧元素，依次为(top,left)到(top,right).</span></span><br><span class="line"><span class="comment">     * 2. 从上到下遍历右侧元素，依次为(top+1, right)到(bottom,right).</span></span><br><span class="line"><span class="comment">     * 3. 如果left&lt;right且top&lt;bottom(如果中心层为1*n或n*1时则不满足), 则从右到左遍历下侧元素，依次为(bottom,right-1)到(bottom,left+1)，以及从</span></span><br><span class="line"><span class="comment">     *    下到上遍历左侧元素，依次为(bottom,left)到(top+1,left).</span></span><br><span class="line"><span class="comment">     * 遍历完当前层的元素之后，将left和top分别增加1，将right和bottom分别减少1，进入下一层继续遍历，直到遍历完所有元素</span></span><br><span class="line"><span class="comment">     * 为止.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(matrix==<span class="keyword">null</span> || matrix.length==<span class="number">0</span> || matrix[<span class="number">0</span>].length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> rows=matrix.length, columns=matrix[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">int</span> left=<span class="number">0</span>, right=columns-<span class="number">1</span>, top=<span class="number">0</span>, bottom=rows-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right &amp;&amp; bottom&gt;=top)&#123;</span><br><span class="line">                <span class="comment">// 从左到右遍历上侧元素</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> column=left; column&lt;=right; column++)</span><br><span class="line">                    ans.add(matrix[top][column]);</span><br><span class="line">                <span class="comment">// 从上到下遍历右侧元素</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> row=top+<span class="number">1</span>; row&lt;=bottom; row++)</span><br><span class="line">                    ans.add(matrix[row][right]);</span><br><span class="line">                <span class="comment">// 该层所属矩阵不是1*n或n*1类型。则从右到左遍历下侧元素，然后从下到上遍历左侧元素。</span></span><br><span class="line">                <span class="keyword">if</span>(left&lt;right &amp;&amp; top&lt;bottom)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> column=right-<span class="number">1</span>; column&gt;left; column--)</span><br><span class="line">                        ans.add(matrix[bottom][column]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> row=bottom; row&gt;top; row--)</span><br><span class="line">                        ans.add(matrix[row][left]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 遍历完当前层的元素之后，进入下一层继续遍历。</span></span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">                top++;</span><br><span class="line">                bottom--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 1： 直接模拟</span></span><br><span class="line"><span class="comment"> * T: O(mn) 其中m和n分别为矩阵的行数和列数</span></span><br><span class="line"><span class="comment"> * S: O(mn) 需创建一个m*n的矩阵visited来记录每个位置是否被访问过。</span></span><br><span class="line"><span class="comment"> * 初始位置是矩阵的左上角，初始方向为向右2，当路径超出界限或者进入之前访问过的位置时，则顺时针旋转，</span></span><br><span class="line"><span class="comment"> * 进入下个方向。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵visited，其中的每个元素</span></span><br><span class="line"><span class="comment"> * 表示该位置是否被访问过。当一个元素被访问时，将visited中对应位置元素置为已访问。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 由于矩阵中每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素</span></span><br><span class="line"><span class="comment"> * 数量时即为完整路径，将该路径返回。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public List&lt;Integer&gt; spiralOrder(int[][] matrix) &#123;</span></span><br><span class="line"><span class="comment">        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(matrix==null || matrix.length==0 || matrix[0].length==0)</span></span><br><span class="line"><span class="comment">            return ans;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 矩阵的行数、列数(rows*columns)</span></span><br><span class="line"><span class="comment">        int rows = matrix.length, columns = matrix[0].length;</span></span><br><span class="line"><span class="comment">        // 标记元素是否被访问过</span></span><br><span class="line"><span class="comment">        boolean[][] visited = new boolean[rows][columns];</span></span><br><span class="line"><span class="comment">        // 总元素数目</span></span><br><span class="line"><span class="comment">        int total = rows*columns;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int row = 0, column = 0;</span></span><br><span class="line"><span class="comment">        // 分别代表四个方向： →，↓，←，↑   如[0,1]表示row+0,column+1</span></span><br><span class="line"><span class="comment">        int[][] directions = &#123;&#123;0, 1&#125;, &#123;1, 0&#125;, &#123;0, -1&#125;, &#123;-1, 0&#125;&#125;;</span></span><br><span class="line"><span class="comment">        int directionIndex = 0;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;total; i++)&#123;</span></span><br><span class="line"><span class="comment">            ans.add(matrix[row][column]);</span></span><br><span class="line"><span class="comment">            visited[row][column] = true;</span></span><br><span class="line"><span class="comment">            // 按照当前方向(directions[directionIndex]，→ || ↓ || ← || ↑)进行移动</span></span><br><span class="line"><span class="comment">            int nextRow = row + directions[directionIndex][0];</span></span><br><span class="line"><span class="comment">            int nextColumn = column + directions[directionIndex][1];</span></span><br><span class="line"><span class="comment">            // 如果路径超出界限或者进入之前访问过的位置，则顺时针旋转(directionsIndex++，变换为下一个方向).</span></span><br><span class="line"><span class="comment">            if(nextRow&lt;0 || nextRow&gt;=rows || nextColumn&lt;0 || nextColumn&gt;=columns || visited[nextRow][nextColumn])&#123;</span></span><br><span class="line"><span class="comment">                directionIndex = (directionIndex+1)%4;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            row += directions[directionIndex][0];</span></span><br><span class="line"><span class="comment">            column += directions[directionIndex][1];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-53 Maximum Subarray</title>
    <link href="http://yoursite.com/2020/07/25/2020-07-25-LeetCode-53-Maximum%20Subarray/"/>
    <id>http://yoursite.com/2020/07/25/2020-07-25-LeetCode-53-Maximum%20Subarray/</id>
    <published>2020-07-25T04:26:00.000Z</published>
    <updated>2020-07-25T15:56:02.089Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [-2,1,-3,4,-1,2,1,-5,4],</span></span><br><span class="line"><span class="comment">//输出: 6</span></span><br><span class="line"><span class="comment">//解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 进阶: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 分治算法 动态规划 </span></span><br><span class="line"><span class="comment">// 👍 2218 👎 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P53MaximumSubarray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> P53MaximumSubarray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.maxSubArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 2:分治算法.</span></span><br><span class="line"><span class="comment">     * T: O(n) 假设我们将递归的过程看作是一颗二叉树的先序遍历，那么这颗二叉树的深度的渐进上界为O(logn)，</span></span><br><span class="line"><span class="comment">     * 这里的总时间相当于遍历这颗二叉树的所有节点，故总时间的渐进上界是O(∑(i=1,logn) 2^(i-1)) = O(n)</span></span><br><span class="line"><span class="comment">     * S: O(logn)，递归会使用O(logn)的栈空间，因此渐进空间复杂度为O(logn).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 定义一个操作get(a,l,r)表示查询a序列[l,r]区间内的最大子段和，那么最终我们要求的答案就是</span></span><br><span class="line"><span class="comment">     * get(nums,0,nums.size()-1)。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;如何分治实现该操作？&#125;</span></span><br><span class="line"><span class="comment">     * 对于一个区间[l,r], 我们取m=[(l+r)/2],对区间[l,m]和[m+1,r]分治求解。当递归逐层深入直到区间长度</span></span><br><span class="line"><span class="comment">     * 缩小为1的时候，递归"开始回升"。这个时候考虑如何通过[l,m]区间的信息和[m+1,r]区间的信息合并成区间</span></span><br><span class="line"><span class="comment">     * [l,r]的信息。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 对于一个区间[l,r]，维护四个量：</span></span><br><span class="line"><span class="comment">     * lSum表示[l,r]内以l为左端点的最大子段和,</span></span><br><span class="line"><span class="comment">     * rSum表示[l,r]内以r为右端点的最大子段和,</span></span><br><span class="line"><span class="comment">     * mSum表示[l,r]内的最大子段和,</span></span><br><span class="line"><span class="comment">     * iSum表示[l,r]的区间和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 对于长度为1的区间[i,i],四个量的值都和ai相等。对于长度大于1的区间：</span></span><br><span class="line"><span class="comment">     * - 首先最好维护的是iSum, 区间[l,r]的iSum就等于[l,m]的iSum加上[m+1,r]的iSum;</span></span><br><span class="line"><span class="comment">     * - 对于[l,r]的lSum，存在两种可能，其要么等于[l,m]的lSum, 要么等于[l,m]的iSum加上[m+1,r]的lSum，两者取较大;</span></span><br><span class="line"><span class="comment">     * - 对于[l,r]的rSum，存在两种可能，其要么等于[m+1,r]的rSum, 要么等于[l,m]的rSum加上[m+1,r]的iSum，两者取较大;</span></span><br><span class="line"><span class="comment">     * - 计算好上面三个量之后，就很好计算[l,r]的mSum了。可以考虑[l,r]的mSum对应的区间是否跨越m：</span></span><br><span class="line"><span class="comment">     *   + 它不可能跨越m，也就是说[l,r]的mSum可能是[l,m]的mSum和[m+1,r]的mSum中的一个；</span></span><br><span class="line"><span class="comment">     *   + 它也可能跨越m，可能是[l,r]的mSum可能是[l,m]的rSum和[m+1,r]的lSum求和。</span></span><br><span class="line"><span class="comment">     *   + 三者取大</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 尽管Solution2分治算法相较于Solution1动态规划而言，时间复杂度相同，而且因为使用了递归，并且维护了四个信息的结构体，</span></span><br><span class="line"><span class="comment">     * 因此运行的时间略长。空间复杂度也并不比方法1优秀。</span></span><br><span class="line"><span class="comment">     * 但是，Solution2分治算法不仅可以解决区间[0,n-1]的最大子段和问题，还可以用于任意的子区间[l,r]的问题，如果我们将[0,n-1]</span></span><br><span class="line"><span class="comment">     * 分支下去出现的所有子区间的信息都用堆式存储的方式记忆下来，即建成一颗真正的树后，我们就可以在O(logn)的时间内求到任意区间内</span></span><br><span class="line"><span class="comment">     * 的答案。甚至可以修改序列中的值，做一些简单的维护，之后仍然可以在O(logn)的时间内求到任意区间内的答案。对于大规模查询的情况</span></span><br><span class="line"><span class="comment">     * 下，该种方法的优势便可体现。这种树就是一种数据结构——线段树。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> maxSub(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>).mSum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求区间[left,right]的最大子字段和.</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Status <span class="title">maxSub</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="comment">// 分</span></span><br><span class="line">                <span class="keyword">int</span> mid = (left+right) &gt;&gt; <span class="number">1</span>; <span class="comment">// 相当于(left+right)/2</span></span><br><span class="line">                Status l = maxSub(nums,left,mid);</span><br><span class="line">                Status r = maxSub(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">                <span class="comment">// 治</span></span><br><span class="line">                <span class="keyword">return</span> pushUp(l,r);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Status(nums[left],nums[left],nums[left],nums[left]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Status <span class="title">pushUp</span><span class="params">(Status l, Status r)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> iSum = l.iSum + r.iSum;</span><br><span class="line">            <span class="keyword">int</span> lSum = Math.max(l.lSum, l.iSum+r.lSum);</span><br><span class="line">            <span class="keyword">int</span> rSum = Math.max(r.rSum, r.iSum+l.rSum);</span><br><span class="line">            <span class="keyword">int</span> mSum = Math.max(Math.max(l.mSum, r.mSum), l.rSum+r.lSum);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Status(lSum, rSum, mSum, iSum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Status</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lSum, rSum, mSum, iSum;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Status</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Status</span><span class="params">(<span class="keyword">int</span> lSum, <span class="keyword">int</span> rSum, <span class="keyword">int</span> mSum, <span class="keyword">int</span> iSum)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lSum = lSum;</span><br><span class="line">            <span class="keyword">this</span>.rSum = rSum;</span><br><span class="line">            <span class="keyword">this</span>.mSum = mSum;</span><br><span class="line">            <span class="keyword">this</span>.iSum = iSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution1: 动态规划</span></span><br><span class="line"><span class="comment"> * T: O(n)   S:O(1)</span></span><br><span class="line"><span class="comment"> * 1. 首先对数组进行遍历，当前最大连续子序列和为sum，结果为ans.</span></span><br><span class="line"><span class="comment"> *    - 如果sum&gt;0, 则说明sum对结果有增益效果，则sum保留并加上当前遍历数字.</span></span><br><span class="line"><span class="comment"> *    - 如果sum&lt;=0, 则说明sum对结果无增益效果，需要舍弃，则sum直接更新为当前遍历数字.</span></span><br><span class="line"><span class="comment"> * 2. 每次比较sum和ans的大小，将最大值置为ans，遍历结束返回结果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int maxSubArray(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        int ans = nums[0];</span></span><br><span class="line"><span class="comment">        int sum = 0;</span></span><br><span class="line"><span class="comment">        for(int num:nums)&#123;</span></span><br><span class="line"><span class="comment">            if(sum&gt;0)</span></span><br><span class="line"><span class="comment">                sum+=num;</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                sum=num;</span></span><br><span class="line"><span class="comment">            ans = Math.max(ans, sum);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="分治算法" scheme="http://yoursite.com/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-45 Jump Gameli</title>
    <link href="http://yoursite.com/2020/07/24/2020-07-24-LeetCode-45-Jump%20Gameli/"/>
    <id>http://yoursite.com/2020/07/24/2020-07-24-LeetCode-45-Jump%20Gameli/</id>
    <published>2020-07-24T10:26:00.000Z</published>
    <updated>2020-07-24T10:26:35.327Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个非负整数数组，你最初位于数组的第一个位置。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 数组中的每个元素代表你在该位置可以跳跃的最大长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [2,3,1,1,4]</span></span><br><span class="line"><span class="comment">//输出: 2</span></span><br><span class="line"><span class="comment">//解释: 跳到最后一个位置的最小跳跃数是 2。</span></span><br><span class="line"><span class="comment">//     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 假设你总是可以到达数组的最后一个位置。 </span></span><br><span class="line"><span class="comment">// Related Topics 贪心算法 数组 </span></span><br><span class="line"><span class="comment">// 👍 636 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpGameIi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> JumpGameIi().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.jump(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 2: 顺瓜摸藤</span></span><br><span class="line"><span class="comment">     * T: O(n^2)  因为最坏的情况如11111，position会从5依次更新到0，并且每次更新都会经历一个for循环.</span></span><br><span class="line"><span class="comment">     * S: O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们已经知道它最终要到达最后一个位置，然后我们找前一个位置，遍历数组，找到能到达它的位置，离它</span></span><br><span class="line"><span class="comment">     * 最远的就是要找的位置。然后继续找上上个位置，最后到了第0个位置就结束了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 至于离它最远的位置，其实我们从左往右遍历数组，第一个满足的位置就是我们要找的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> position = nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> steps = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(position!=<span class="number">0</span>)&#123;  <span class="comment">// 是否到了第0个位置</span></span><br><span class="line">                <span class="comment">// (从左往右)找距离position最远且能到达position的点.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;position; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]+i &gt;= position)&#123;</span><br><span class="line">                        position = i;</span><br><span class="line">                        steps++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> steps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 1: 贪心算法(顺藤摸瓜)</span></span><br><span class="line"><span class="comment"> * T: O(n)  S: O(1)</span></span><br><span class="line"><span class="comment"> * 要求：从数组的第0个位置开始跳，跳的距离小于等于数组上对应的数。求出跳到最后一个位置需要的最短步数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 贪心算法：</span></span><br><span class="line"><span class="comment"> * 如2,3,1,1,4. 开始的位置是2，可跳的范围是(2),[3,1],1,4，然后因为3可以跳的更远，所以跳到3的位置，</span></span><br><span class="line"><span class="comment"> * 此时能跳的范围是2,[3],(1,1,4).然后因为4可以跳的更远，所以下次跳到4的位置。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 代码中end表示当前能跳的边界。到了边界，就重新更新新的边界。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int jump(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        int end = 0;</span></span><br><span class="line"><span class="comment">        int maxPosition = 0;</span></span><br><span class="line"><span class="comment">        int steps = 0;</span></span><br><span class="line"><span class="comment">        // 之所以i&lt;nums.length-1, 是因为起跳位置是边界第0个位置，steps已经加1了。如果最后一步</span></span><br><span class="line"><span class="comment">        // 刚好跳到了末尾，此时steps其实不用加1了。如果是i&lt;nums.length, 则i遍历到最后时会进入</span></span><br><span class="line"><span class="comment">        // if语句中，使得steps多加1.</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;nums.length-1; i++)&#123;</span></span><br><span class="line"><span class="comment">            // 寻找能跳的最远的</span></span><br><span class="line"><span class="comment">            maxPosition = Math.max(maxPosition, nums[i]+i);</span></span><br><span class="line"><span class="comment">            if(i==end)&#123;</span></span><br><span class="line"><span class="comment">                // 遇到边界，就更新边界，并且步数加1</span></span><br><span class="line"><span class="comment">                end = maxPosition;</span></span><br><span class="line"><span class="comment">                steps++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return steps;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
      <category term="贪心算法" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-42 Trapping Rain Water</title>
    <link href="http://yoursite.com/2020/07/24/2020-07-24-LeetCode-42-Trapping%20Rain%20Water/"/>
    <id>http://yoursite.com/2020/07/24/2020-07-24-LeetCode-42-Trapping%20Rain%20Water/</id>
    <published>2020-07-24T07:06:00.000Z</published>
    <updated>2020-07-24T07:07:14.614Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Mar</span></span><br><span class="line"><span class="comment">//cos 贡献此图。         ___</span></span><br><span class="line"><span class="comment">//          __         |__|__    __</span></span><br><span class="line"><span class="comment">//    __   |__|__    __|__|__|__|__|__</span></span><br><span class="line"><span class="comment">// __|__|__|__|__|__|__|__|__|__|__|__|</span></span><br><span class="line"><span class="comment">// (其中凹陷的地方可以存水，共计可接6个单位的水)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span></span><br><span class="line"><span class="comment">//输出: 6 </span></span><br><span class="line"><span class="comment">// Related Topics 栈 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 1488 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrappingRainWater</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> TrappingRainWater().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.trap(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;height.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> max_left = <span class="number">0</span>, max_right = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&gt;=<span class="number">0</span>; j--)</span><br><span class="line">                    max_left = Math.max(max_left, height[j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;height.length-<span class="number">1</span>; j++)</span><br><span class="line">                    max_right = Math.max(max_right, height[j]);</span><br><span class="line">                ans += Math.min(max_left, max_right) - height[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution1：暴力法</span></span><br><span class="line"><span class="comment"> * T: O(n^2)  S: O(1)</span></span><br><span class="line"><span class="comment"> * 对于数组中的每个元素，找出下雨后水能达到的最高位置，等于两边最大高度的较小值减去当前高度的值。</span></span><br><span class="line"><span class="comment"> * 1. 初始化ans=0</span></span><br><span class="line"><span class="comment"> * 2. 从左往右扫描数组：</span></span><br><span class="line"><span class="comment"> *    - 初始化max_left=0, max_right=0</span></span><br><span class="line"><span class="comment"> *    - 从当前元素向左扫描并更新：</span></span><br><span class="line"><span class="comment"> *      max_left = max(max_left, height[j])</span></span><br><span class="line"><span class="comment"> *    - 从当前元素向右扫描并更新：</span></span><br><span class="line"><span class="comment"> *      max_right = max(max_right, height[j])</span></span><br><span class="line"><span class="comment"> *    - 将min(max_left, max_right) - height[i]累加到ans.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int trap(int[] height) &#123;</span></span><br><span class="line"><span class="comment">        int ans = 0;</span></span><br><span class="line"><span class="comment">        for(int i=1; i&lt;height.length-1; i++)&#123;</span></span><br><span class="line"><span class="comment">            int max_left = 0, max_right = 0;</span></span><br><span class="line"><span class="comment">            for(int j=i; j&gt;=0; j--)</span></span><br><span class="line"><span class="comment">                max_left = Math.max(max_left, height[j]);</span></span><br><span class="line"><span class="comment">            for(int j=i; j&lt;height.length-1; j++)</span></span><br><span class="line"><span class="comment">                max_right = Math.max(max_right, height[j]);</span></span><br><span class="line"><span class="comment">            ans += Math.min(max_left, max_right) - height[i];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution2: 动态编程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路：暴力法中，仅仅是为了找到最大值，每次都要向左和向右扫描一次，但是我们可以提前存储这个值，因此，</span></span><br><span class="line"><span class="comment"> * 可以通过动态编程来解决。</span></span><br><span class="line"><span class="comment"> * 1. 找到数组中从下标i到最左端最高的条形块高度left_max.</span></span><br><span class="line"><span class="comment"> * 2. 找到数组中从下标i到最右端最高的条形块高度right_max.</span></span><br><span class="line"><span class="comment"> * 3. 扫描数组height并更新答案：</span></span><br><span class="line"><span class="comment"> *    - 累加min(max_left[i], max_right[i]-height[i])到ans上。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int trap(int[] height) &#123;</span></span><br><span class="line"><span class="comment">        if(height==null || height.length==0) return 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int ans = 0;</span></span><br><span class="line"><span class="comment">        int size = height.length;</span></span><br><span class="line"><span class="comment">        int[] left_max = new int[size];</span></span><br><span class="line"><span class="comment">        int[] right_max = new int[size];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        left_max[0] = height[0];</span></span><br><span class="line"><span class="comment">        for(int i=1; i&lt;size; i++)</span></span><br><span class="line"><span class="comment">            left_max[i] = Math.max(height[i], left_max[i-1]);</span></span><br><span class="line"><span class="comment">        right_max[size-1] = height[size-1];</span></span><br><span class="line"><span class="comment">        for(int i=size-2; i&gt;=0; i--)</span></span><br><span class="line"><span class="comment">            right_max[i] = Math.max(height[i], right_max[i+1]);</span></span><br><span class="line"><span class="comment">        for(int i=1; i&lt;size-1; i++)</span></span><br><span class="line"><span class="comment">            ans += Math.min(left_max[i], right_max[i]) - height[i];</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution3: 栈</span></span><br><span class="line"><span class="comment"> * T: O(n) 单次遍历O(n),每个条形块最多访问两次(栈的弹入弹出)，且弹入和弹出栈都是O(1).</span></span><br><span class="line"><span class="comment"> * S: O(n) 栈最多在阶梯形或平坦型条形块结构中占用O(n)的空间。</span></span><br><span class="line"><span class="comment"> * 可以不用方法1，2那样存储最大高度，而是用栈来跟踪可能储水的最长的条形块。使用栈就可以在一次遍历内完成计算。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在遍历数组时维护一个栈，如果当前的条形块小于或等于栈顶的条形块，则将条形块的索引入栈，意思是当前的条形块</span></span><br><span class="line"><span class="comment"> * 被栈中的前一个条形块界定。如果我们发现一个条形块长于栈顶，我们可以确定栈顶的条形块被当前条形块和栈的前一</span></span><br><span class="line"><span class="comment"> * 个条形块界定，因此我们可以弹出栈顶元素并且累加答案到ans。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 算法：</span></span><br><span class="line"><span class="comment"> * 1. 使用栈来存储条形块的索引下标。</span></span><br><span class="line"><span class="comment"> * 2. 遍历数组：</span></span><br><span class="line"><span class="comment"> *    - 当栈非空且height[current] &gt; height[st.top()]</span></span><br><span class="line"><span class="comment"> *      + 意味着栈中元素可以被弹出，弹出栈顶元素top。</span></span><br><span class="line"><span class="comment"> *      + 计算当前元素和栈顶元素的距离，准备进行填充操作</span></span><br><span class="line"><span class="comment"> *        distance = current - st.top() - 1</span></span><br><span class="line"><span class="comment"> *      + 找出界定高度</span></span><br><span class="line"><span class="comment"> *        bounded_height = min(height[current], height[st.top()]) - height[top]</span></span><br><span class="line"><span class="comment"> *      + 往答案中累加积水量 ans += distance*bounded_height</span></span><br><span class="line"><span class="comment"> *    - 将当前索引下标入栈</span></span><br><span class="line"><span class="comment"> *    - 将current移动到下一个位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int trap(int[] height) &#123;</span></span><br><span class="line"><span class="comment">        int ans=0, current=0;</span></span><br><span class="line"><span class="comment">        Stack&lt;Integer&gt; st = new Stack&lt;&gt;();</span></span><br><span class="line"><span class="comment">        while(current &lt; height.length)&#123;</span></span><br><span class="line"><span class="comment">            while(!st.empty() &amp;&amp; height[current]&gt;height[st.peek()])&#123;</span></span><br><span class="line"><span class="comment">                int top = st.peek();</span></span><br><span class="line"><span class="comment">                st.pop();</span></span><br><span class="line"><span class="comment">                if(st.empty())</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                int distance = current-st.peek()-1;</span></span><br><span class="line"><span class="comment">                int bounded_height = Math.min(height[current], height[st.peek()]) - height[top];</span></span><br><span class="line"><span class="comment">                ans += distance * bounded_height;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            st.push(current++);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution4：双指针</span></span><br><span class="line"><span class="comment"> * T: O(n) 单次遍历的时间为O(n)</span></span><br><span class="line"><span class="comment"> * s: O(1)  left,right,left_max,right_max只需要常数的空间</span></span><br><span class="line"><span class="comment"> * 从动态编程方法可以注意到，只要right_max[i]&gt;left_max[i](元素0到元素6，积水高度将由left_max决定)，类似地，</span></span><br><span class="line"><span class="comment"> * left_max[i]&gt;right_max[i](元素8到元素11)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所以可以认为如果一端有更高的条形块(例如右端)，积水的高度依赖于当前方向的高度(从左到右)。当我们发现另一侧(右侧)的</span></span><br><span class="line"><span class="comment"> * 条形块高度不是最高的，我们则开始从相反的方向遍历(从右到左)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 算法：</span></span><br><span class="line"><span class="comment"> * 1. 初始化left指针为0，right指针为size-1；</span></span><br><span class="line"><span class="comment"> * 2. while left&lt;right, do:</span></span><br><span class="line"><span class="comment"> *       - if height[left]&lt;height[right]</span></span><br><span class="line"><span class="comment"> *          + if height[left]&gt;=left_max, 更新left_max</span></span><br><span class="line"><span class="comment"> *          + else 累加left_max-height[left]到ans</span></span><br><span class="line"><span class="comment"> *          + left=left+1</span></span><br><span class="line"><span class="comment"> *       - else</span></span><br><span class="line"><span class="comment"> *          + if height[right]&gt;=right_max,更新right_max</span></span><br><span class="line"><span class="comment"> *          + else 累加right_max-height[right]到ans</span></span><br><span class="line"><span class="comment"> *          + right=right-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int trap(int[] height) &#123;</span></span><br><span class="line"><span class="comment">        int left=0, right=height.length-1;</span></span><br><span class="line"><span class="comment">        int ans=0;</span></span><br><span class="line"><span class="comment">        int left_max=0, right_max=0;</span></span><br><span class="line"><span class="comment">        while(left&lt;right)&#123;</span></span><br><span class="line"><span class="comment">            if(height[left]&lt;height[right])&#123; //如果一端有更高的条形块(如右端)</span></span><br><span class="line"><span class="comment">                // 则积水的高度依赖于当前方向的高度(从左到右)</span></span><br><span class="line"><span class="comment">                if(height[left] &gt;= left_max)</span></span><br><span class="line"><span class="comment">                    left_max = height[left];</span></span><br><span class="line"><span class="comment">                else</span></span><br><span class="line"><span class="comment">                    ans += (left_max - height[left]);</span></span><br><span class="line"><span class="comment">                ++left;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else&#123;  //如果该侧条形块高度不是最高的，(如左端最高)，则开始从相反的方向遍历(从右到左)</span></span><br><span class="line"><span class="comment">                if(height[right] &gt;= right_max)</span></span><br><span class="line"><span class="comment">                    right_max=height[right];</span></span><br><span class="line"><span class="comment">                else</span></span><br><span class="line"><span class="comment">                    ans += (right_max - height[right]);</span></span><br><span class="line"><span class="comment">                --right;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-41 First Missing Positive</title>
    <link href="http://yoursite.com/2020/07/24/2020-07-24-LeetCode-41-First%20Missing%20Positive/"/>
    <id>http://yoursite.com/2020/07/24/2020-07-24-LeetCode-41-First%20Missing%20Positive/</id>
    <published>2020-07-24T03:28:00.000Z</published>
    <updated>2020-07-24T03:28:57.175Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个未排序的整数数组，请你找出其中没有出现的最小的正整数。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,2,0]</span></span><br><span class="line"><span class="comment">//输出: 3</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [3,4,-1,1]</span></span><br><span class="line"><span class="comment">//输出: 2</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 3: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [7,8,9,11,12]</span></span><br><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 提示： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的算法的时间复杂度应为O(n)，并且只能使用常数级别的额外空间。 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 </span></span><br><span class="line"><span class="comment">// 👍 682 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstMissingPositive</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> FirstMissingPositive().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.firstMissingPositive(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">1</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果本题无额外的时空复杂度要求，则易于实现：</span></span><br><span class="line"><span class="comment">     * - 我们可以将数组所有的数放入哈希表，随后从1开始依次枚举正整数，并判断其是否在哈希表中；</span></span><br><span class="line"><span class="comment">     * - 我们也可以从1开始依次枚举正整数，并遍历数组，判断其是否在数组中。</span></span><br><span class="line"><span class="comment">     * 若数组长度为N，第一种做法的时间复杂度为O(N),空间复杂度为O(N).第二种做法的时间复杂度为O(N^2),空间复杂度为O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以退而求其次，利用给定数组中的空间来存储一些状态。如果题目给定的数组是不可修改的，那么就不存在满足时空复杂度</span></span><br><span class="line"><span class="comment">     * 要求的算法了。但如果可以修改给定的数组，那么是存在满足要求的算法的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Solution：哈希表</span></span><br><span class="line"><span class="comment">     * T: O(N)  S:O(1)</span></span><br><span class="line"><span class="comment">     * 思路：考虑将给定的数组设计为哈希表的「替代产品」。实际上，对于一个长度为N的数组，其中没有出现的最小正整数只能在[1,N+1]中，</span></span><br><span class="line"><span class="comment">     * 因为，如果[1,N]都出现了，那么答案是N+1。否则答案是[1,N]中没有出现的最小正整数。因此，我们将所有在[1,N]范围内的数放入哈希</span></span><br><span class="line"><span class="comment">     * 表中，也可以得到最终答案。而给定的数组长度恰好为N，因此可以数组设计成哈希表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 对数组进行遍历，对于遍历到的数x， 如果它在[1,N]的范围内，那么就将数组中的第x-1个位置(数组下标从0开始)打上标记。遍历结束</span></span><br><span class="line"><span class="comment">     * 后，如果所有位置都被打上了标记，那么答案就是N+1。否则答案是最小的没有被打上标记的位置加1。</span></span><br><span class="line"><span class="comment">     * 2. 如何设计该「标记」。由于只在意[1,N]中的数，因此把不在[1,N]范围内的数修改成任意一个大于N的数(如N+1)。这样一来，数组中的</span></span><br><span class="line"><span class="comment">     * 所有数就都是正数了，因此我们可以将「标记」表示为「负号」。</span></span><br><span class="line"><span class="comment">     *  - 将数组中所有小于等于0的数修改为N+1；</span></span><br><span class="line"><span class="comment">     *  - 遍历数组中的每一个数x，它可能已经被打了标记(负号)，因此原本对应的数为|x|，如果|x|∈[1,N]，那么给数组中的第|x|-1个位置</span></span><br><span class="line"><span class="comment">     *  的数添加一个负号。如果它已经有负号，则不需要重复添加。</span></span><br><span class="line"><span class="comment">     *  - 遍历完成后，如果数组中所有数都是负数，那么答案就是N+1，否则答案是第一个正数(未打标记)的位置加1。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  E.g.  n=6</span></span><br><span class="line"><span class="comment">     *   3  4  -1   1  9  -5</span></span><br><span class="line"><span class="comment">     *   3  4   7   1  9   7    将所有负数变为n+1.</span></span><br><span class="line"><span class="comment">     *  -3  4  -7  -1  9   7    做标记.  (4对应的下标为1，即1+1=2为所缺失的最小正整数)</span></span><br><span class="line"><span class="comment">     *  [0][1] [2] [3][4] [5]</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &lt;= <span class="number">0</span>)</span><br><span class="line">                    nums[i] = n + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> num = Math.abs(nums[i]);</span><br><span class="line">                <span class="keyword">if</span>(num&lt;=n)</span><br><span class="line">                    nums[num-<span class="number">1</span>] = -Math.abs(nums[num-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-40 Combination Sumli</title>
    <link href="http://yoursite.com/2020/07/24/2020-07-24-LeetCode-40-Combination%20Sumli/"/>
    <id>http://yoursite.com/2020/07/24/2020-07-24-LeetCode-40-Combination%20Sumli/</id>
    <published>2020-07-24T02:25:00.000Z</published>
    <updated>2020-07-24T02:28:56.209Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// candidates 中的每个数字在每个组合中只能使用一次。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 所有数字（包括目标数）都是正整数。 </span></span><br><span class="line"><span class="comment">// 解集不能包含重复的组合。 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: candidates = [10,1,2,7,6,1,5], target = 8,</span></span><br><span class="line"><span class="comment">//所求解集为:</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [1, 7],</span></span><br><span class="line"><span class="comment">//  [1, 2, 5],</span></span><br><span class="line"><span class="comment">//  [2, 6],</span></span><br><span class="line"><span class="comment">//  [1, 1, 6]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: candidates = [2,5,2,1,2], target = 5,</span></span><br><span class="line"><span class="comment">//所求解集为:</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [1,2,2],</span></span><br><span class="line"><span class="comment">//  [5]</span></span><br><span class="line"><span class="comment">//] </span></span><br><span class="line"><span class="comment">// Related Topics 数组 回溯算法 </span></span><br><span class="line"><span class="comment">// 👍 314 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSumIi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> CombinationSumIi().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.combinationSum2(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>&#125;, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution</span></span><br><span class="line"><span class="comment">     * 与"组合总和"相比，所要解决的问题是：让同一层级不出现相同的元素，但是允许不同层级之间的重复</span></span><br><span class="line"><span class="comment">     * 如:[1,1,2,5,6,7,10]</span></span><br><span class="line"><span class="comment">     * 允许出现[1,1,6]，但是不允许出现[1,2,5]和[1,2,5].</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(candidates == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            Arrays.sort(candidates);</span><br><span class="line">            dfs(target, <span class="number">0</span>, <span class="keyword">new</span> Stack&lt;Integer&gt;(), candidates);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> index, Stack&lt;Integer&gt; pre, <span class="keyword">int</span>[] candidates)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(pre));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * "组合总和"中代码</span></span><br><span class="line"><span class="comment">            for(int i=index; i&lt;candidates.length; i++)&#123;</span></span><br><span class="line"><span class="comment">                // 如果减数大于目标值，则差为负数，不符合结果</span></span><br><span class="line"><span class="comment">                if(candidates[i]&lt;=target)&#123;</span></span><br><span class="line"><span class="comment">                    pre.push(candidates[i]);</span></span><br><span class="line"><span class="comment">                    // 目标值减去元素值</span></span><br><span class="line"><span class="comment">                    dfs(target-candidates[i], i, pre, candidates);</span></span><br><span class="line"><span class="comment">                    // 每次回溯将最后一次加入的元素删除</span></span><br><span class="line"><span class="comment">                    pre.pop();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;candidates.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 防止出现重复情况  如[1,1,2,5,6,7,10]</span></span><br><span class="line">                <span class="comment">// 可以出现[1,1,6]，但是不允许出现[1(第一个1),2,5] [1(第二个1),2,5]两次</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;index &amp;&amp; candidates[i-<span class="number">1</span>]==candidates[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(candidates[i]&lt;=target) &#123;</span><br><span class="line">                    pre.push(candidates[i]);</span><br><span class="line">                    <span class="comment">// 深度遍历时，index+1, 因为不可使用重复元素</span></span><br><span class="line">                    dfs(target - candidates[i], i + <span class="number">1</span>, pre, candidates);</span><br><span class="line">                    pre.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="回溯算法" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-39 Combination Sum</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23-LeetCode-39-Combination-Sum/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23-LeetCode-39-Combination-Sum/</id>
    <published>2020-07-23T15:09:00.000Z</published>
    <updated>2020-07-24T01:25:12.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>回溯思路如下：</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh1sqlkhj1j31400u01kz.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// candidates 中的数字可以无限制重复被选取。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 所有数字（包括 target）都是正整数。 </span></span><br><span class="line"><span class="comment">// 解集不能包含重复的组合。 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：candidates = [2,3,6,7], target = 7,</span></span><br><span class="line"><span class="comment">//所求解集为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [7],</span></span><br><span class="line"><span class="comment">//  [2,2,3]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：candidates = [2,3,5], target = 8,</span></span><br><span class="line"><span class="comment">//所求解集为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [2,2,2,2],</span></span><br><span class="line"><span class="comment">//  [2,3,3],</span></span><br><span class="line"><span class="comment">//  [3,5]</span></span><br><span class="line"><span class="comment">//] </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 提示： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 1 &lt;= candidates.length &lt;= 30 </span></span><br><span class="line"><span class="comment">// 1 &lt;= candidates[i] &lt;= 200 </span></span><br><span class="line"><span class="comment">// candidate 中的每个元素都是独一无二的。 </span></span><br><span class="line"><span class="comment">// 1 &lt;= target &lt;= 500 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 回溯算法 </span></span><br><span class="line"><span class="comment">// 👍 768 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinationSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> CombinationSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.combinationSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 回溯算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * e.g. candidates = [2,3,6,7], target = 7.</span></span><br><span class="line"><span class="comment">     * 回溯思路： (每个节点代表: candidate[i](下一轮target))  如2(5).</span></span><br><span class="line"><span class="comment">     * -&gt; 2(5) -&gt; 2(3) -&gt; 2(2)</span></span><br><span class="line"><span class="comment">     *                 -&gt; 3(0) √</span></span><br><span class="line"><span class="comment">     *         -&gt; 3(2)</span></span><br><span class="line"><span class="comment">     * -&gt; 3(4)</span></span><br><span class="line"><span class="comment">     * -&gt; 6(1)</span></span><br><span class="line"><span class="comment">     * -&gt; 7(0) √</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(candidates == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            dfs(target, <span class="number">0</span>, <span class="keyword">new</span> Stack&lt;Integer&gt;(), candidates);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//深度遍历</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> index, Stack&lt;Integer&gt; pre, <span class="keyword">int</span>[] candidates)</span></span>&#123;</span><br><span class="line">            <span class="comment">// 等于零说明结果符合要求</span></span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(pre));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历，index为本分支上一节点的减数的下标</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;candidates.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 如果减数大于目标值，则差为负数，不符合结果</span></span><br><span class="line">                <span class="keyword">if</span>(candidates[i]&lt;=target)&#123;</span><br><span class="line">                    pre.push(candidates[i]);</span><br><span class="line">                    <span class="comment">// 目标值减去元素值</span></span><br><span class="line">                    dfs(target-candidates[i], i, pre, candidates);</span><br><span class="line">                    <span class="comment">// 每次回溯将最后一次加入的元素删除</span></span><br><span class="line">                    pre.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;回溯思路如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gh1sqlkhj1j31400u01kz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="回溯算法" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-35 Search Insert Position</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23-LeetCode-35-Search-Insert-Position/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23-LeetCode-35-Search-Insert-Position/</id>
    <published>2020-07-22T18:11:00.000Z</published>
    <updated>2020-07-22T18:11:51.772Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设数组中无重复元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 5</span></span><br><span class="line"><span class="comment">//输出: 2</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 2</span></span><br><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 3: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 7</span></span><br><span class="line"><span class="comment">//输出: 4</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 4: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: [1,3,5,6], 0</span></span><br><span class="line"><span class="comment">//输出: 0</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 </span></span><br><span class="line"><span class="comment">// 👍 615 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInsertPosition</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> SearchInsertPosition().<span class="keyword">new</span> Solution();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>, right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-34 Find First And Last Position Of Element In Sorted Array</title>
    <link href="http://yoursite.com/2020/07/23/2020-07-23-LeetCode-34-Find-First-And-Last-Position-Of-Element-In-Sorted-Array/"/>
    <id>http://yoursite.com/2020/07/23/2020-07-23-LeetCode-34-Find-First-And-Last-Position-Of-Element-In-Sorted-Array/</id>
    <published>2020-07-22T16:19:00.000Z</published>
    <updated>2020-07-22T16:31:17.973Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的算法时间复杂度必须是 O(log n) 级别。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果数组中不存在目标值，返回 [-1, -1]。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [5,7,7,8,8,10], target = 8</span></span><br><span class="line"><span class="comment">//输出: [3,4] </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [5,7,7,8,8,10], target = 6</span></span><br><span class="line"><span class="comment">//输出: [-1,-1] </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 </span></span><br><span class="line"><span class="comment">// 👍 513 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFirstAndLastPositionOfElementInSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> FindFirstAndLastPositionOfElementInSortedArray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(Arrays.toString(solution.searchRange(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">2</span>&#125;, <span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 二分查找</span></span><br><span class="line"><span class="comment">     * 1. 首先考虑边界条件，如果nums为空，返回[-1,-1]，如果列表长度为1且target==nums[0]，返回[0,0]，否则返回[-1,-1]</span></span><br><span class="line"><span class="comment">     * 2. 利用二分法，如果找到值和target相同，则为获取目标值所在区间，从以下三种情况分析：</span></span><br><span class="line"><span class="comment">     *    (1). mid等于0，即left=0, right从0开始遍历，直到和target不相等则停止；</span></span><br><span class="line"><span class="comment">     *    (2). mid等于nums.length-1, 则right=nums.length-1, left从nums.length-1开始遍历，直到和target不相等则停止；</span></span><br><span class="line"><span class="comment">     *    (3). mid在中间，则left与right都等于mid，并且使左指针和右指针分别往左/右遍历，直到与target不相等为止;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(nums.length == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[<span class="number">0</span>]==target? <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;:<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> left=<span class="number">0</span>, right=nums.length-<span class="number">1</span>, flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">                    left = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)</span><br><span class="line">                    right = mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    flag=<span class="number">1</span>; <span class="comment">//有等于target的元素</span></span><br><span class="line">                    <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">                        left=<span class="number">0</span>;</span><br><span class="line">                        right=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">while</span>(right&lt;nums.length-<span class="number">1</span> &amp;&amp; nums[right+<span class="number">1</span>]==target)</span><br><span class="line">                            right++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(mid==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                        left=nums.length-<span class="number">1</span>;</span><br><span class="line">                        right=nums.length-<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(left&gt;<span class="number">0</span> &amp;&amp; nums[left-<span class="number">1</span>]==target)</span><br><span class="line">                            left--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        left=mid;</span><br><span class="line">                        right=mid;</span><br><span class="line">                        <span class="keyword">while</span>(right&lt;nums.length-<span class="number">1</span> &amp;&amp; nums[right+<span class="number">1</span>]==target)</span><br><span class="line">                            right++;</span><br><span class="line">                        <span class="keyword">while</span>(left&gt;<span class="number">0</span> &amp;&amp; nums[left-<span class="number">1</span>]==target)</span><br><span class="line">                            left--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flag==<span class="number">0</span>? <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;: <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left, right&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-33 Search In Rotated Sorted Array</title>
    <link href="http://yoursite.com/2020/07/22/2020-07-22-LeetCode-33-Search-In-Rotated-Sorted-Array/"/>
    <id>http://yoursite.com/2020/07/22/2020-07-22-LeetCode-33-Search-In-Rotated-Sorted-Array/</id>
    <published>2020-07-22T10:51:00.000Z</published>
    <updated>2020-07-22T10:52:10.064Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设按照升序排序的数组在预先未知的某个点上进行了旋转。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设数组中不存在重复的元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你的算法时间复杂度必须是 O(log n) 级别。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [4,5,6,7,0,1,2], target = 0</span></span><br><span class="line"><span class="comment">//输出: 4</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: nums = [4,5,6,7,0,1,2], target = 3</span></span><br><span class="line"><span class="comment">//输出: -1 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 </span></span><br><span class="line"><span class="comment">// 👍 837 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInRotatedSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> SearchInRotatedSortedArray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.search(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 二分搜索</span></span><br><span class="line"><span class="comment">     * 本题我初始解法为：先找到翻转点，然后将数组复原为有序数组，然后二分搜索找到对应target的点，再根据翻转点index进行下标换算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 优解：</span></span><br><span class="line"><span class="comment">     * 数组本身不是有序的，因为进行旋转后只保证了数组的局部有序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当把数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的。如：[4,5,6,7,0,1,2]从6所在位置分开：</span></span><br><span class="line"><span class="comment">     * 得到[4,5,6]和[7,0,1,2]两部分。其中左边[4,5,6]部分是有序的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - 如果[left,mid-1]是有序数组，且target大小满足[nums[left], num[mid]]，那么应该将搜索范围缩小至[left,mid-1],</span></span><br><span class="line"><span class="comment">     * 否则在[mid+1, right]中寻找。</span></span><br><span class="line"><span class="comment">     * - 如果[mid, right]是有序数组，且target大小满足[nums[mid+1], nums[right]], 那么应该将搜索范围缩小至[mid+1, right]，</span></span><br><span class="line"><span class="comment">     * 否则在[left, mid-1]中寻找。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums.length==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[<span class="number">0</span>] == target? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left=<span class="number">0</span>, right=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                <span class="keyword">if</span>(nums[<span class="number">0</span>]&lt;=nums[mid])&#123;</span><br><span class="line">                    <span class="comment">// 如果前半部分为有序数组</span></span><br><span class="line">                    <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid])</span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 如果后半部分为有序数组</span></span><br><span class="line">                    <span class="keyword">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[n-<span class="number">1</span>])</span><br><span class="line">                        left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-31 Next Permutation</title>
    <link href="http://yoursite.com/2020/07/22/2020-07-22-LeetCode-31-Next-Permutation/"/>
    <id>http://yoursite.com/2020/07/22/2020-07-22-LeetCode-31-Next-Permutation/</id>
    <published>2020-07-22T07:20:00.000Z</published>
    <updated>2020-07-22T07:21:39.027Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 必须原地修改，只允许使用额外常数空间。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。 </span></span><br><span class="line"><span class="comment">//1,2,3 → 1,3,2 </span></span><br><span class="line"><span class="comment">//3,2,1 → 1,2,3 </span></span><br><span class="line"><span class="comment">//1,1,5 → 1,5,1 </span></span><br><span class="line"><span class="comment">// Related Topics 数组 </span></span><br><span class="line"><span class="comment">// 👍 577 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextPermutation</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> NextPermutation().<span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        solution.nextPermutation(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字典序：比如对于1，2，3来说，可以组成这样的字典序列表[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]],</span></span><br><span class="line"><span class="comment">     * 我们所要找的就是其中元素的下一个列表元素。如[1,2,3]-&gt;[1,3,2]，如果到了最后一个元素，则推第一个元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Solution：</span></span><br><span class="line"><span class="comment">     * 1.先找出最大的索引k满足nums[k]&lt;nums[k+1],如果不存在，就翻转整个数组；</span></span><br><span class="line"><span class="comment">     * 2.再找出另一个最大索引l满足nums[l]&gt;nums[k];</span></span><br><span class="line"><span class="comment">     * 3.交换nums[l]和nums[k];</span></span><br><span class="line"><span class="comment">     * 4.最后反转nums[k+1:]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * E.g.</span></span><br><span class="line"><span class="comment">     * nums=[1,2,7,4,3,1]</span></span><br><span class="line"><span class="comment">     * 1. nums[1]=2</span></span><br><span class="line"><span class="comment">     * 2. nums[4]=3 &gt; nums[1]</span></span><br><span class="line"><span class="comment">     * 3. nums=[1,3,7,4,2,1]</span></span><br><span class="line"><span class="comment">     * 4. nums=[1,3,1,2,4,7]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    k = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k==-<span class="number">1</span>)&#123;</span><br><span class="line">                reverse(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> l = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[k])&#123;</span><br><span class="line">                    l = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, k, l);</span><br><span class="line">            reverse(nums, k+<span class="number">1</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">                swap(nums, i++, j--);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-27 Remove Element</title>
    <link href="http://yoursite.com/2020/07/22/2020-07-22-LeetCode-27-Remove-Element/"/>
    <id>http://yoursite.com/2020/07/22/2020-07-22-LeetCode-27-Remove-Element/</id>
    <published>2020-07-21T17:56:00.000Z</published>
    <updated>2020-07-21T18:17:29.195Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [3,2,2,3], val = 3,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//注意这五个元素可为任意顺序。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 为什么返回数值是整数，但输出的答案是数组呢? </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以想象内部操作如下: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span></span><br><span class="line"><span class="comment">//int len = removeElement(nums, val);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">//// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">//    print(nums[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 603 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveElement</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> RemoveElement().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.removeElement(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">int</span> i=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;nums.length &amp;&amp; nums[j]==val)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j&lt;nums.length)</span><br><span class="line">                    nums[++i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26 Remove Duplicates From Sorted Array</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-26-Remove-Duplicates-From-Sorted-Array/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-26-Remove-Duplicates-From-Sorted-Array/</id>
    <published>2020-07-21T15:26:00.000Z</published>
    <updated>2020-07-21T15:26:53.147Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定数组 nums = [1,1,2], </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定 nums = [0,0,1,1,1,2,2,3,3,4],</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//你不需要考虑数组中超出新长度后面的元素。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 为什么返回数值是整数，但输出的答案是数组呢? </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以想象内部操作如下: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="comment">//int len = removeDuplicates(nums);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">//// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">//    print(nums[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 1539 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesFromSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> RemoveDuplicatesFromSortedArray().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.removeDuplicates(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.length==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]!=nums[i])&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    nums[i]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16 Four Sum</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-18-Four%20Sum/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-18-Four%20Sum/</id>
    <published>2020-07-21T14:35:00.000Z</published>
    <updated>2020-07-21T14:48:12.517Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c +</span></span><br><span class="line"><span class="comment">// d 的值与 target 相等？找出所有满足条件且不重复的四元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 答案中不可以包含重复的四元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//满足要求的四元组集合为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [-1,  0, 0, 1],</span></span><br><span class="line"><span class="comment">//  [-2, -1, 1, 2],</span></span><br><span class="line"><span class="comment">//  [-2,  0, 0, 2]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 哈希表 双指针 </span></span><br><span class="line"><span class="comment">// 👍 519 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> FourSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.fourSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">2</span>&#125;, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">          for(int first=0; first&lt;n; ++first)&#123;</span></span><br><span class="line"><span class="comment">                // 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line"><span class="comment">                if(first&gt;0 &amp;&amp; nums[first]==nums[first-1])</span></span><br><span class="line"><span class="comment">                    continue;</span></span><br><span class="line"><span class="comment">                for(int second=first+1; second&lt;n; ++second)&#123;</span></span><br><span class="line"><span class="comment">                    // 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line"><span class="comment">                    if(second&gt;first+1 &amp;&amp; nums[second]==nums[second-1])</span></span><br><span class="line"><span class="comment">                        continue;</span></span><br><span class="line"><span class="comment">                    int third = second+1, fourth = n-1;</span></span><br><span class="line"><span class="comment">                    while(third&lt;fourth)&#123;</span></span><br><span class="line"><span class="comment">                        if(nums[first]+nums[second]+nums[third]+nums[fourth]&lt;target)</span></span><br><span class="line"><span class="comment">                            third++;</span></span><br><span class="line"><span class="comment">                        else if(nums[first]+nums[second]+nums[third]+nums[fourth]&gt;target)</span></span><br><span class="line"><span class="comment">                            fourth--;</span></span><br><span class="line"><span class="comment">                        else&#123;</span></span><br><span class="line"><span class="comment">                            List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line"><span class="comment">                            list.add(nums[first]);</span></span><br><span class="line"><span class="comment">                            list.add(nums[second]);</span></span><br><span class="line"><span class="comment">                            list.add(nums[third]);</span></span><br><span class="line"><span class="comment">                            list.add(nums[fourth]);</span></span><br><span class="line"><span class="comment">                            res.add(list);</span></span><br><span class="line"><span class="comment">                            // c,d枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line"><span class="comment">                            while(third&lt;fourth &amp;&amp; nums[third+1]==nums[third])</span></span><br><span class="line"><span class="comment">                                third++;</span></span><br><span class="line"><span class="comment">                            while(third&lt;fourth &amp;&amp; nums[fourth-1]==nums[fourth])</span></span><br><span class="line"><span class="comment">                                fourth--;</span></span><br><span class="line"><span class="comment">                            third++;</span></span><br><span class="line"><span class="comment">                            fourth--;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> first=<span class="number">0</span>; first&lt;n; ++first)&#123;</span><br><span class="line">                <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                <span class="keyword">if</span>(first&gt;<span class="number">0</span> &amp;&amp; nums[first]==nums[first-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> second=first+<span class="number">1</span>; second&lt;n; ++second)&#123;</span><br><span class="line">                    <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                    <span class="keyword">if</span>(second&gt;first+<span class="number">1</span> &amp;&amp; nums[second]==nums[second-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> third=second+<span class="number">1</span>; third&lt;n; ++third)&#123;</span><br><span class="line">                        <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                        <span class="keyword">if</span>(third&gt;second+<span class="number">1</span> &amp;&amp; nums[third]==nums[third-<span class="number">1</span>])</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">int</span> tar = target-nums[first]-nums[second]-nums[third];</span><br><span class="line">                        <span class="keyword">int</span> fourth = n-<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(third&lt;fourth &amp;&amp; nums[fourth]&gt;tar)</span><br><span class="line">                            fourth--;</span><br><span class="line">                        <span class="comment">// 如果指针重合，那么随后续c增加时，不会有满足a+b+c+d=0且c&lt;d的d了，故退出循环.</span></span><br><span class="line">                        <span class="keyword">if</span>(fourth==third)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">if</span>(nums[fourth]==tar)&#123;</span><br><span class="line">                            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                            list.add(nums[first]);</span><br><span class="line">                            list.add(nums[second]);</span><br><span class="line">                            list.add(nums[third]);</span><br><span class="line">                            list.add(nums[fourth]);</span><br><span class="line">                            res.add(list);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16 Three Sum Closest</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-16-Three%20Sum%20Closest/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-16-Three%20Sum%20Closest/</id>
    <published>2020-07-21T13:58:00.000Z</published>
    <updated>2020-07-21T13:59:45.834Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和</span></span><br><span class="line"><span class="comment">//。假定每组输入只存在唯一答案。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：nums = [-1,2,1,-4], target = 1</span></span><br><span class="line"><span class="comment">//输出：2</span></span><br><span class="line"><span class="comment">//解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 提示： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 3 &lt;= nums.length &lt;= 10^3 </span></span><br><span class="line"><span class="comment">// -10^3 &lt;= nums[i] &lt;= 10^3 </span></span><br><span class="line"><span class="comment">// -10^4 &lt;= target &lt;= 10^4 </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 514 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSumClosest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> ThreeSumClosest().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.threeSumClosest(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">4</span>&#125;, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution: 排序+双指针</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 解法类似"三数之和"</span></span><br><span class="line"><span class="comment">     * 1. 数组排序(升序)，假设数组长度n，先枚举a，其在数组中位置为i。为防止重复枚举，在位置[i+1,n)范围内枚举b和c.</span></span><br><span class="line"><span class="comment">     * 2. 借助双指针，pb和pc分别表示指向b和c的指针，初始时,pb指向位置i+1,pc指向位置n-1.</span></span><br><span class="line"><span class="comment">     * 3. 如果 a+b+c &gt;= target, pc向左移动一个位置；</span></span><br><span class="line"><span class="comment">     *    如果 a+b+c &lt; target, pb向右移动一个位置;</span></span><br><span class="line"><span class="comment">     *    如果 a+b+c == target, 直接返回结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">int</span> best = <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> first=<span class="number">0</span>; first&lt;n; ++first)&#123;</span><br><span class="line">                <span class="comment">// 保证和上一次枚举的元素不相等</span></span><br><span class="line">                <span class="keyword">if</span>(first&gt;<span class="number">0</span> &amp;&amp; nums[first]==nums[first-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 双指针枚举b和c</span></span><br><span class="line">                <span class="keyword">int</span> second = first+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> third = n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(second&lt;third)&#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[first] + nums[second] + nums[third];</span><br><span class="line">                    <span class="comment">// 和为target时直接返回答案</span></span><br><span class="line">                    <span class="keyword">if</span>(sum==target)</span><br><span class="line">                        <span class="keyword">return</span> target;</span><br><span class="line">                    <span class="comment">// 根据差值绝对值判断三数之和和target是否相近</span></span><br><span class="line">                    <span class="keyword">if</span>(Math.abs(sum-target)&lt;Math.abs(best-target))</span><br><span class="line">                        best = sum;</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        <span class="comment">// 如果和大于target，移动c对应的指针</span></span><br><span class="line">                        <span class="keyword">int</span> newthird = third-<span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 将c移动到下一个不相等的元素</span></span><br><span class="line">                        <span class="keyword">while</span>(second&lt;newthird &amp;&amp; nums[newthird]==nums[third])</span><br><span class="line">                            newthird--;</span><br><span class="line">                        third = newthird;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">// 如果和小于target，移动b对应的指针</span></span><br><span class="line">                        <span class="keyword">int</span> newsecond = second+<span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 将b移动到下一个不相等的元素</span></span><br><span class="line">                        <span class="keyword">while</span>(newsecond&lt;third &amp;&amp; nums[newsecond]==nums[second])</span><br><span class="line">                            newsecond++;</span><br><span class="line">                        second = newsecond;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> best;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-15 Three Sum</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-15-Three-Sum/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-15-Three-Sum/</id>
    <published>2020-07-21T11:07:00.000Z</published>
    <updated>2020-07-21T11:08:09.294Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复</span></span><br><span class="line"><span class="comment">//的三元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意：答案中不可以包含重复的三元组。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//满足要求的三元组集合为：</span></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  [-1, 0, 1],</span></span><br><span class="line"><span class="comment">//  [-1, -1, 2]</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针 </span></span><br><span class="line"><span class="comment">// 👍 2398 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSum</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> ThreeSum().<span class="keyword">new</span> Solution();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = solution.threeSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">4</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Integer&gt; numList: res)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Integer num: numList)</span><br><span class="line">                System.out.printf(<span class="string">"%d "</span>, num);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Solution 1: 排序+双指针</span></span><br><span class="line"><span class="comment">     * T: O(N^2)  S: O(N)</span></span><br><span class="line"><span class="comment">     * 如果简单地使用三重循环枚举所有的三元组，会得到O(N^3)个三元组。还需要使用哈希表来进行去重操作。</span></span><br><span class="line"><span class="comment">     * 比如: [1 -1 1 -1 0]可能会出现多次[1 -1 0] [1 -1 0]的重复三元组.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 而如果将数组中的元素从小到大进行排序，随后使用普通的三重循环，则可以减少重复。</span></span><br><span class="line"><span class="comment">     * [0,1,2,2,2,3]</span></span><br><span class="line"><span class="comment">     * 同时，对于每一重循环而言，相邻两次枚举的元素不能相同，否则也会造成重复。比如使用三重循环枚举到的</span></span><br><span class="line"><span class="comment">     * 第一个三元组为(0,1,2)，继续枚举下一个元素，仍然是三元组(0,1,2)，产生重复。因此我们需要将第三重</span></span><br><span class="line"><span class="comment">     * 循环"跳到"下一个不相同的元素，即3, 枚举三元组(0,1,3).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 此方法时间复杂度仍为O(N^3)。但是还可以继续优化。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果固定了前两重循环枚举到的元素a和b，那么只有唯一的c满足a+b+c=0，当第二重循环往后枚举一个元素b'时，</span></span><br><span class="line"><span class="comment">     * 由于b'&gt;b，那么满足a+b'+c'=0的c'一定有c'&lt;c，，即c'在数组中一定出现在c的左侧，*因此，我们可以从小</span></span><br><span class="line"><span class="comment">     * 到大枚举b，同时从大到小枚举c，即第二重循环和第三重循环成为并列关系。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 于是可以保持第二重循环不变，而将第三重循环变成一个从数组最右端开始向左移动的指针。即双指针。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = nums.length;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">            <span class="comment">// 枚举a</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> first=<span class="number">0</span>; first&lt;n; ++first)&#123;</span><br><span class="line">                <span class="comment">// 枚举的元素需要和上一次枚举的数不相同</span></span><br><span class="line">                <span class="keyword">if</span>(first&gt;<span class="number">0</span> &amp;&amp; nums[first]==nums[first-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// c对应的指针初始指向数组的最右端</span></span><br><span class="line">                <span class="keyword">int</span> third = n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> target = -nums[first];</span><br><span class="line">                <span class="comment">// 枚举b</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> second = first+<span class="number">1</span>; second&lt;n; ++second)&#123;</span><br><span class="line">                    <span class="comment">// 需要和上次枚举的数不相同</span></span><br><span class="line">                    <span class="keyword">if</span>(second &gt; first+<span class="number">1</span> &amp;&amp; nums[second]==nums[second-<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//需要保证b的指针在c的指针的左侧</span></span><br><span class="line">                    <span class="keyword">while</span>(second&lt;third &amp;&amp; nums[second]+nums[third]&gt;target)</span><br><span class="line">                        --third;</span><br><span class="line">                    <span class="comment">// 如果指针重合，那么随着b后续的增加，就不会有满足a+b+c=0且b&lt;c的c了，所以推出循环</span></span><br><span class="line">                    <span class="keyword">if</span>(second==third)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>(nums[second]+nums[third]==target)&#123;</span><br><span class="line">                        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                        list.add(nums[first]);</span><br><span class="line">                        list.add(nums[second]);</span><br><span class="line">                        list.add(nums[third]);</span><br><span class="line">                        res.add(list);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-11 Container With Most Water</title>
    <link href="http://yoursite.com/2020/07/21/2020-07-21-LeetCode-11-Container-With-Most-Water/"/>
    <id>http://yoursite.com/2020/07/21/2020-07-21-LeetCode-11-Container-With-Most-Water/</id>
    <published>2020-07-20T18:00:00.000Z</published>
    <updated>2020-07-21T08:41:56.060Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i,</span></span><br><span class="line"><span class="comment">//ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 说明：你不能倾斜容器，且 n 的值至少为 2。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入：[1,8,6,2,5,4,8,3,7]</span></span><br><span class="line"><span class="comment">//输出：49</span></span><br><span class="line"><span class="comment">// Related Topics 数组 双指针</span></span><br><span class="line"><span class="comment">// 👍 1649 👎 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerWithMostWater</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> ContainerWithMostWater().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.maxArea(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;height.length-<span class="number">1</span>; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;height.length; j++)</span><br><span class="line">                    maxArea = Math.max(maxArea, (j-i)*Math.min(height[i], height[j]));</span><br><span class="line">            <span class="keyword">return</span> maxArea;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-5 Longest Palindromic Substring</title>
    <link href="http://yoursite.com/2020/07/20/2020-07-20-LeetCode-5-Longest-Palindromic-Substring/"/>
    <id>http://yoursite.com/2020/07/20/2020-07-20-LeetCode-5-Longest-Palindromic-Substring/</id>
    <published>2020-07-20T15:06:00.000Z</published>
    <updated>2020-07-20T15:06:41.519Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "babad"</span></span><br><span class="line"><span class="comment">//输出: "bab"</span></span><br><span class="line"><span class="comment">//注意: "aba" 也是一个有效答案。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2： </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "cbbd"</span></span><br><span class="line"><span class="comment">//输出: "bb"</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 字符串 动态规划 </span></span><br><span class="line"><span class="comment">// 👍 2449 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestPalindromicSubstring</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> LongestPalindromicSubstring().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.longestPalindrome(<span class="string">"babad"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()&lt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> begin = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> len1 = expandAroundCenter(s,i,i);  <span class="comment">//长度为1的回文中心</span></span><br><span class="line">                <span class="keyword">int</span> len2 = expandAroundCenter(s,i,i+<span class="number">1</span>);  <span class="comment">//长度为2的回文中心</span></span><br><span class="line">                <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">                <span class="keyword">if</span>(len &gt; end-begin)&#123;</span><br><span class="line">                    begin = i - (len-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                    end = i + len/<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s.substring(begin, end+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">            <span class="keyword">while</span>(L&gt;=<span class="number">0</span> &amp;&amp; R&lt;s.length() &amp;&amp; s.charAt(L)==s.charAt(R))&#123;</span><br><span class="line">                L--;</span><br><span class="line">                R++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> R-L-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 1: 暴力破解法</span></span><br><span class="line"><span class="comment"> * T: O(n^3)  S: O(1)</span></span><br><span class="line"><span class="comment"> * 列举出所有的字串，并判断其是否为回文串，保存最长的回文串.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法运行超时.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    // 判断字符串s是否为回文字符串</span></span><br><span class="line"><span class="comment">    public boolean checkStr(String s)&#123;</span></span><br><span class="line"><span class="comment">        int i=0, j=s.length()-1;</span></span><br><span class="line"><span class="comment">        for(; i&lt;j; i++,j--)&#123;</span></span><br><span class="line"><span class="comment">            if(s.charAt(i) != s.charAt(j))</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return i &gt;= j;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public String longestPalindrome(String s) &#123;</span></span><br><span class="line"><span class="comment">        String maxStr = "";</span></span><br><span class="line"><span class="comment">        int maxStrLen = 0;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;s.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">            for(int j=i+1; j&lt;=s.length(); j++)&#123;</span></span><br><span class="line"><span class="comment">                // System.out.println(s.substring(i,j));</span></span><br><span class="line"><span class="comment">                String substr = s.substring(i,j);</span></span><br><span class="line"><span class="comment">                if(checkStr(substr) &amp;&amp; substr.length()&gt;maxStrLen)&#123;</span></span><br><span class="line"><span class="comment">                    maxStr = substr;</span></span><br><span class="line"><span class="comment">                    maxStrLen = Math.max(maxStrLen, substr.length());</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return maxStr;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 2: 动态规划</span></span><br><span class="line"><span class="comment"> * T: O(n^2)  S: O(n^2) 动态规划的状态总数为O(n^2)，对于每个状态需要转移的时间为O(1)。存储动态规划状态需要的空间O(n^2).</span></span><br><span class="line"><span class="comment"> * 1. 如果已经知道"bab"是回文串，那么"ababa"一定也是回文串。因为其首尾两字母都是"a"。基于此思路，</span></span><br><span class="line"><span class="comment"> * 就可以用动态规划的方法解决本题。P(i,j)表示字符串s的第i到j个字母组成的串。</span></span><br><span class="line"><span class="comment"> * P(i,j) = | true  如果子串Si..Sj是回文串</span></span><br><span class="line"><span class="comment"> *          | false 其他情况(两种可能：a. S[i,j]本身不是一个回文串; b. i&gt;j，此时s[i,j]本身不合法.)</span></span><br><span class="line"><span class="comment"> * 由此就可以得出动态规划的状态转移方程:</span></span><br><span class="line"><span class="comment"> *          P(i,j) = P(i+1, j-1) ^ (Si==Sj)</span></span><br><span class="line"><span class="comment"> * 即只有s[i+1:j-1]是回文串，且s的第i和j个字母相同时，s[i:j]才会是回文串。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 上述情况建立在子串长度大于2的前提。而对于动态规划中的边界条件，即子串长度为1或2。长度为1的子串显然是个</span></span><br><span class="line"><span class="comment"> * 回文串。对于长度为2的子串，只要其两个字母相同，就是个回文串。</span></span><br><span class="line"><span class="comment"> * 因此得出动态规划的边界条件:</span></span><br><span class="line"><span class="comment"> *          | P(i,i) = true</span></span><br><span class="line"><span class="comment"> *          | P(i,i+1) = (Si == Si+1)</span></span><br><span class="line"><span class="comment"> * 最终的答案即为所有P(i,j)=true中j-i+1(即子串长度)的最大值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public String longestPalindrome(String s) &#123;</span></span><br><span class="line"><span class="comment">        int len = s.length(), maxLen = 1, begin = 0;</span></span><br><span class="line"><span class="comment">        if(len &lt; 2)</span></span><br><span class="line"><span class="comment">            return s;</span></span><br><span class="line"><span class="comment">        // 1. 状态定义</span></span><br><span class="line"><span class="comment">        // dp[i][j]表示s[i...j]是否是回文串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 2. 初始化</span></span><br><span class="line"><span class="comment">        boolean[][] dp = new boolean[len][len];</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="comment">            dp[i][i] = true;</span></span><br><span class="line"><span class="comment">        char[] chars = s.toCharArray();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 3. 状态转移</span></span><br><span class="line"><span class="comment">        // 先填左下角: 先一列一列填写再一行一行填写.</span></span><br><span class="line"><span class="comment">        for(int j=1; j&lt;len; j++)&#123;</span></span><br><span class="line"><span class="comment">            for(int i=0; i&lt;j; i++)&#123;</span></span><br><span class="line"><span class="comment">                // 首尾字符不相等，不是回文串</span></span><br><span class="line"><span class="comment">                if(chars[i] != chars[j])</span></span><br><span class="line"><span class="comment">                    dp[i][j] = false;</span></span><br><span class="line"><span class="comment">                else&#123;</span></span><br><span class="line"><span class="comment">                    // 相等的情况, 考虑首尾去除后的边界情况.</span></span><br><span class="line"><span class="comment">                    // 即去除首尾后没有字符剩余或者剩下一个字符时，肯定是回文串</span></span><br><span class="line"><span class="comment">                    if(j-i &lt; 3)</span></span><br><span class="line"><span class="comment">                        dp[i][j] = true;</span></span><br><span class="line"><span class="comment">                    else</span></span><br><span class="line"><span class="comment">                        dp[i][j] = dp[i+1][j-1];</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                // dp[i][j]==true，表示s[i...j]是否是回文串</span></span><br><span class="line"><span class="comment">                if(dp[i][j] &amp;&amp; j-i+1&gt;maxLen)&#123;</span></span><br><span class="line"><span class="comment">                    maxLen = j-i+1;</span></span><br><span class="line"><span class="comment">                    begin = i;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 4. 返回</span></span><br><span class="line"><span class="comment">        return s.substring(begin,begin+maxLen);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 3: 中心扩展算法</span></span><br><span class="line"><span class="comment"> * T: O(n^2)  S: O(1)  长度为1和2的回文中心分别有n和n-1个，每个回文中心最多会向外扩展O(n)次.</span></span><br><span class="line"><span class="comment"> * 1. 观察动态规划方法中的状态转移方程</span></span><br><span class="line"><span class="comment"> *    | P(i,i) = true</span></span><br><span class="line"><span class="comment"> *    | P(i,i+1) = (Si==Si+1)</span></span><br><span class="line"><span class="comment"> *    | P(i,j) = P(i+1, j-1) ^ (Si==Sj)</span></span><br><span class="line"><span class="comment"> * 其中状态转移链: P(i,j) &lt;- P(i+1,j-1) &lt;- P(i+2,j-2) &lt;- ... &lt;- 某一边界情况</span></span><br><span class="line"><span class="comment"> * 可以发现，所有状态在转移的时候的可能性是唯一的，即我们可以从每一种边界情况开始"扩展"，也可以</span></span><br><span class="line"><span class="comment"> * 得出所有的状态对应的答案。</span></span><br><span class="line"><span class="comment"> * 2. 边界情况即为子串为1或2的情况。枚举每一种边界情况，并从对应的子串开始不断向两边扩展。如果</span></span><br><span class="line"><span class="comment"> * 两边的字母不同，就可以停止扩展。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本质：枚举所有的"回文中心"并尝试扩展，直到无法扩展为止。此时的回文串长度即为此"回文中心"下的</span></span><br><span class="line"><span class="comment"> * 最长回文串长度。对所有的长度求出最大值即为所求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public String longestPalindrome(String s) &#123;</span></span><br><span class="line"><span class="comment">        if(s==null || s.length()&lt;1)</span></span><br><span class="line"><span class="comment">            return "";</span></span><br><span class="line"><span class="comment">        int begin = 0, end = 0;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;s.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">            int len1 = expandAroundCenter(s,i,i);  //长度为1的回文中心</span></span><br><span class="line"><span class="comment">            int len2 = expandAroundCenter(s,i,i+1);  //长度为2的回文中心</span></span><br><span class="line"><span class="comment">            int len = Math.max(len1, len2);</span></span><br><span class="line"><span class="comment">            if(len &gt; end-begin)&#123;</span></span><br><span class="line"><span class="comment">                begin = i - (len-1)/2;</span></span><br><span class="line"><span class="comment">                end = i + len/2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return s.substring(begin, end+1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    private int expandAroundCenter(String s, int left, int right)&#123;</span></span><br><span class="line"><span class="comment">        int L = left, R = right;</span></span><br><span class="line"><span class="comment">        while(L&gt;=0 &amp;&amp; R&lt;s.length() &amp;&amp; s.charAt(L)==s.charAt(R))&#123;</span></span><br><span class="line"><span class="comment">            L--;</span></span><br><span class="line"><span class="comment">            R++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return R-L-1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-4 Median Of Two Sorted Arrays</title>
    <link href="http://yoursite.com/2020/07/20/2020-07-20-LeetCode-4-Median-Of-Two-Sorted-Arrays/"/>
    <id>http://yoursite.com/2020/07/20/2020-07-20-LeetCode-4-Median-Of-Two-Sorted-Arrays/</id>
    <published>2020-07-19T18:21:00.000Z</published>
    <updated>2020-07-19T18:22:43.533Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 你可以假设 nums1 和 nums2 不会同时为空。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// nums1 = [1, 3]</span></span><br><span class="line"><span class="comment">//nums2 = [2]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//则中位数是 2.0</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// nums1 = [1, 2]</span></span><br><span class="line"><span class="comment">//nums2 = [3, 4]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//则中位数是 (2 + 3)/2 = 2.5</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 数组 二分查找 分治算法 </span></span><br><span class="line"><span class="comment">// 👍 2929 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MedianOfTwoSortedArrays</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> MedianOfTwoSortedArrays().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(solution.findMedianSortedArrays(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> length1 = nums1.length, length2 = nums2.length;</span><br><span class="line">            <span class="keyword">int</span> totalLength = length1 + length2;</span><br><span class="line">            <span class="keyword">if</span>(totalLength % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> midIndex = totalLength / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">double</span> median = getKMinthElement(nums1, nums2, midIndex+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> median;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> midIndex1 = totalLength / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> midIndex2 = totalLength / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">double</span> median = (getKMinthElement(nums1, nums2, midIndex1 + <span class="number">1</span>) +getKMinthElement(nums1, nums2, midIndex2 + <span class="number">1</span>))/<span class="number">2.0</span>;</span><br><span class="line">                <span class="keyword">return</span> median;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出nums1，nums2中第k小的元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKMinthElement</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> length1 = nums1.length, length2 = nums2.length;</span><br><span class="line">            <span class="keyword">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 边界情况</span></span><br><span class="line">                <span class="keyword">if</span>(index1 == length1)&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums2[index2 + k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(index2 == length2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums1[index1 + k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> Math.min(nums1[index1], nums2[index2]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 正常情况</span></span><br><span class="line">                <span class="keyword">int</span> half = k/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> newIndex1 = Math.min(index1+half, length1) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> newIndex2 = Math.min(index2+half, length2) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];</span><br><span class="line">                <span class="keyword">if</span>(pivot1 &lt;= pivot2)&#123;</span><br><span class="line">                    k -= (newIndex1 - index1 + <span class="number">1</span>);</span><br><span class="line">                    index1 = newIndex1 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    k -= (newIndex2 - index2 + <span class="number">1</span>);</span><br><span class="line">                    index2 = newIndex2 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力破解：</span></span><br><span class="line"><span class="comment"> * 1. 使用归并方式，合并两个有序数组，得到的大的有序数组的中间位置元素，即为中位数</span></span><br><span class="line"><span class="comment"> * 2. 只需找到中位数位置也可。两数组长度已知，中位数对应的两数组下标和已知，维护两个指针，初识时分别</span></span><br><span class="line"><span class="comment"> * 指向两个数组的下标为0的位置。每次将指向较小值的指针后移一位(若一指针已达数组末尾，则仅移动另一指针)，</span></span><br><span class="line"><span class="comment"> * 直到到达中位数的位置.</span></span><br><span class="line"><span class="comment"> * 这两种思路的时间复杂度均为O(m+n). 但题目时间复杂度要求为O(log(m+n))。而对时间复杂度要求有log，通常</span></span><br><span class="line"><span class="comment"> * 都需用到二分查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Solution 1: 二分查找</span></span><br><span class="line"><span class="comment"> * S: O(log(m+n))  S: O(1)</span></span><br><span class="line"><span class="comment"> * 中位数：两有序数组中的第(m+n)/2个元素(m+n为奇数)； 两有序数组中的第(m+n)/2个元素和第(m+n)/2+1个元素</span></span><br><span class="line"><span class="comment"> * 的平均值(m+n为偶数).   因此转化为寻找两有序数组中的第k小的数(k为(m+n)/2或(m+n)/2+1).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 假设两个有序数组分别是 A 和 B。要找到第 k 个元素，我们可以比较 A[k/2-1] 和 B[k/2-1]，其中 / 表示整数</span></span><br><span class="line"><span class="comment"> * 除法。由于 A[k/2-1] 和 B[k/2-1] 的前面分别有 A[0,..,k/2-2] 和 B[0,..,k/2-2]，即 k-2 个元素，对于</span></span><br><span class="line"><span class="comment"> * A[k/2-1] 和 B[k/2-1] 中的较小值，最多只会有 (k/2-1)+(k/2-1) ≤ k−2 个元素比它小，那么它就不能是第 k</span></span><br><span class="line"><span class="comment"> * 小的数了。</span></span><br><span class="line"><span class="comment"> * 因此归纳出三种情况:</span></span><br><span class="line"><span class="comment"> * 1. 如果 A[k/2-1] &lt; B[k/2-1]，则比 A[k/2-1] 小的数最多只有 A 的前 k/2-1 个数和 B 的前 k/2-1 个数，</span></span><br><span class="line"><span class="comment"> * 即比 A[k/2-1] 小的数最多只有 k-2 个，因此 A[k/2-1] 不可能是第 k 个数，A[0] 到 A[k/2−1] 也都不可能是</span></span><br><span class="line"><span class="comment"> * 第 k 个数，可以全部排除。</span></span><br><span class="line"><span class="comment"> * 2. 如果 A[k/2-1] &gt; B[k/2-1]，则可以排除 B[0] 到 B[k/2−1]。</span></span><br><span class="line"><span class="comment"> * 3. 如果 A[k/2−1]=B[k/2−1]，则可以归入第一种情况处理。</span></span><br><span class="line"><span class="comment"> * 同时，我们将在排除后的新数组上仅需进行二分查找，并且根据我们排除数的个数，减少k的值，因为所排除的数都不大于</span></span><br><span class="line"><span class="comment"> * 第k小的数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三种情况需特殊处理</span></span><br><span class="line"><span class="comment"> * 1. 如果 A[k/2−1] 或者 B[k/2−1] 越界，那么我们可以选取对应数组中的最后一个元素。在这种情况下，我们必须</span></span><br><span class="line"><span class="comment"> * 根据排除数的个数减少 k 的值，而不能直接将 k 减去 k/2。</span></span><br><span class="line"><span class="comment"> * 2. 如果一个数组为空，说明该数组中的所有元素都被排除，那么我们可以直接返回另一个数组中第k小的元素。</span></span><br><span class="line"><span class="comment"> * 3. 如果k=1，我们只要返回两个数组首元素的最小值即可。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * E.g.</span></span><br><span class="line"><span class="comment"> * A: 1 3 4 9   (m=4)</span></span><br><span class="line"><span class="comment"> * B: 1 2 3 4 5 6 7 8 9  (n=9)   k=7   k/2-1=2</span></span><br><span class="line"><span class="comment"> * A[2] &gt; B[2], 排除B[0]-B[2]，更新k: k=k-k/2=4   k/2-1=1</span></span><br><span class="line"><span class="comment"> * A: 1 3 4 9</span></span><br><span class="line"><span class="comment"> * B: [1 2 3] 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment"> * A[1] &lt; B[4], 排除A[0]-A[1]，更新k: k=k-k/2=2   k/2-1=0</span></span><br><span class="line"><span class="comment"> * A: [1 3] 4 9</span></span><br><span class="line"><span class="comment"> * B: [1 2 3] 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment"> * A[2] = B[3]，排除A[2]， 更新k: k=k-k/2=1, 由于k值变为1，因此直接比较两有序数组中未排除下标范围内的第一个</span></span><br><span class="line"><span class="comment"> * 数，其中较小的数即为第k个数.</span></span><br><span class="line"><span class="comment"> * A[3] &gt; B[3]  =&gt;   B[3] = 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</span></span><br><span class="line"><span class="comment">        int length1 = nums1.length, length2 = nums2.length;</span></span><br><span class="line"><span class="comment">        int totalLength = length1 + length2;</span></span><br><span class="line"><span class="comment">        if(totalLength % 2 == 1)&#123;</span></span><br><span class="line"><span class="comment">            int midIndex = totalLength / 2;</span></span><br><span class="line"><span class="comment">            double median = getKMinthElement(nums1, nums2, midIndex+1);</span></span><br><span class="line"><span class="comment">            return median;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            int midIndex1 = totalLength / 2 - 1;</span></span><br><span class="line"><span class="comment">            int midIndex2 = totalLength / 2;</span></span><br><span class="line"><span class="comment">            double median = (getKMinthElement(nums1, nums2, midIndex1 + 1) +getKMinthElement(nums1, nums2, midIndex2 + 1))/2.0;</span></span><br><span class="line"><span class="comment">            return median;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 找出nums1，nums2中第k小的元素</span></span><br><span class="line"><span class="comment">    public int getKMinthElement(int[] nums1, int[] nums2, int k)&#123;</span></span><br><span class="line"><span class="comment">        int length1 = nums1.length, length2 = nums2.length;</span></span><br><span class="line"><span class="comment">        int index1 = 0, index2 = 0;</span></span><br><span class="line"><span class="comment">        while(true)&#123;</span></span><br><span class="line"><span class="comment">            // 边界情况</span></span><br><span class="line"><span class="comment">            if(index1 == length1)&#123;</span></span><br><span class="line"><span class="comment">                return nums2[index2 + k - 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(index2 == length2)&#123;</span></span><br><span class="line"><span class="comment">                return nums1[index1 + k - 1];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(k == 1)&#123;</span></span><br><span class="line"><span class="comment">                return Math.min(nums1[index1], nums2[index2]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // 正常情况</span></span><br><span class="line"><span class="comment">            int half = k/2;</span></span><br><span class="line"><span class="comment">            int newIndex1 = Math.min(index1+half, length1) - 1;</span></span><br><span class="line"><span class="comment">            int newIndex2 = Math.min(index2+half, length2) - 1;</span></span><br><span class="line"><span class="comment">            int pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];</span></span><br><span class="line"><span class="comment">            if(pivot1 &lt;= pivot2)&#123;</span></span><br><span class="line"><span class="comment">                k -= (newIndex1 - index1 + 1);</span></span><br><span class="line"><span class="comment">                index1 = newIndex1 + 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else&#123;</span></span><br><span class="line"><span class="comment">                k -= (newIndex2 - index2 + 1);</span></span><br><span class="line"><span class="comment">                index2 = newIndex2 + 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution 2: 划分数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 首先，在任意位置 i 将 A 划分成两个部分：</span></span><br><span class="line"><span class="comment"> *            left_A            |          right_A</span></span><br><span class="line"><span class="comment"> *     A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]</span></span><br><span class="line"><span class="comment"> *    由于 A 中有 m 个元素， 所以有 m+1 种划分的方法。其中i=0时, left_A为空集，i=m时，right_A为空集</span></span><br><span class="line"><span class="comment"> * 2. 将 left_A 和 left_B 放入一个集合，并将 right_A 和 right_B 放入另一个集合。 再把这两个新的集合</span></span><br><span class="line"><span class="comment"> *    分别命名为 left_part 和 right_part：</span></span><br><span class="line"><span class="comment"> *           left_part          |         right_part</span></span><br><span class="line"><span class="comment"> *     A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]</span></span><br><span class="line"><span class="comment"> *     B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    1⃣ 当A和B的总长度为偶数时，如果可以确认：</span></span><br><span class="line"><span class="comment"> *      - len(left_part) = len(right_part)</span></span><br><span class="line"><span class="comment"> *      - max(left_part) &lt;= min(right_part)</span></span><br><span class="line"><span class="comment"> *    那么，&#123;A,B&#125;中所有元素已经被划分为相同长度的两部分，且前一部分中的元素总是小于或等于后一部分中的元素。</span></span><br><span class="line"><span class="comment"> *    中位数就是前一部分的最大值和后一部分的最小值的平均值。</span></span><br><span class="line"><span class="comment"> *          median = [max(left_part) + min(right_part)] / 2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    2⃣ 当A和B的总长度为奇数时，如果可以确认：</span></span><br><span class="line"><span class="comment"> *      - len(left_part) = len(right_part) + 1</span></span><br><span class="line"><span class="comment"> *      - max(left_part) &lt;= min(right_part)</span></span><br><span class="line"><span class="comment"> *    那么，&#123;A,B&#125;中的所有元素已经被划分为两个部分，前一部分比后一部分多一个元素，且前一部分中的元素总是小于或</span></span><br><span class="line"><span class="comment"> *    等于后一部分中的元素。中位数就是前一部分的最大值。</span></span><br><span class="line"><span class="comment"> *          median = max(left_part)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    第一个条件对于总长度是偶数和奇数的情况有所不同，但是可以将两种情况合并。第二个条件对于总长度是偶数和奇数</span></span><br><span class="line"><span class="comment"> *    的情况是一样的。要确保这两个条件，只需要保证：</span></span><br><span class="line"><span class="comment"> *    1⃣ i+j = m-i+n-j(当m+n为偶数) 或 i+j = m-i+n-j+1(当m+n为奇数)。等号左侧为前一部分的元素个数，右侧为</span></span><br><span class="line"><span class="comment"> *    后一部分的元素个数。将i+j全部移到等号左侧，得到i+j = (m+n+1)/2。 此处分数结果只保留整数部分。</span></span><br><span class="line"><span class="comment"> *    2⃣ 0&lt;=i&lt;=m, 0&lt;=j&lt;=n。如果我们规定A的长度小于等于B的长度，即m&lt;=n。这样对于任意的 i∈[0,m]，都有</span></span><br><span class="line"><span class="comment"> *    j= (m+n+1)/2 - i ∈[0,n]。那么我们在[0,m]的范围内枚举i并得到j，就不需要额外的性质了。</span></span><br><span class="line"><span class="comment"> *      - 如果A的长度较大，那么只要交换A和B即可。</span></span><br><span class="line"><span class="comment"> *      - 如果m &gt; n, 那么得出的j有可能是负数。</span></span><br><span class="line"><span class="comment"> *    3⃣ B[j-1] &lt;= A[i] 以及 A[i-1] &lt;= B[j]，即前一部分的最大值小于等于后一部分的最小值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    为简化分析，假设A[i-1], B[j-1], A[i], B[j]总是存在。对于i=0. i=m, j=0, j=n这样的临界条件，我们只需要</span></span><br><span class="line"><span class="comment"> *    规定A[-1]=B[-1]=-∞, A[m]=B[n]=∞即可。这也是比较直观的：当一个数组不出现在前一部分时，对应的值为负无穷，</span></span><br><span class="line"><span class="comment"> *    就不会对前一部分的最大值产生影响；当一个数组不出现在后一部分时，对应的值为正无穷，</span></span><br><span class="line"><span class="comment"> *    因此，需要：</span></span><br><span class="line"><span class="comment"> *    在[0,m]中找到i,使得：</span></span><br><span class="line"><span class="comment"> *      B[j-1] &lt;= A[i] 且 A[i-1] &lt;= B[j]，其中j=(m+n+1)/2-i.</span></span><br><span class="line"><span class="comment"> *    我们证明它等价于：</span></span><br><span class="line"><span class="comment"> *    在[0,m]中找到最大的i，使得：</span></span><br><span class="line"><span class="comment"> *      A[i-1] &lt;= B[j]，其中j=(m+n+1)/2-i</span></span><br><span class="line"><span class="comment"> *    其是因为：</span></span><br><span class="line"><span class="comment"> *      - 当i从0~m递增时，A[i-1]递增, B[j]递减，所以一定存在一个最大的i满足A[i-1] &lt;= B[j];</span></span><br><span class="line"><span class="comment"> *      - 如果i是最大的，那么说明i+1不满足。将i+1带入可以得到A[i]&gt;B[j-1],也就是B[j-1]&lt;A[i]，就和进行等价变换前i的</span></span><br><span class="line"><span class="comment"> *      性质一致了(甚至更强)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    因此我们可以对i在[0,m]的区间上进行二分搜索，找到最大的满足A[i-1]&lt;=B[j]的i值，就得到了划分的方法。此时，划分</span></span><br><span class="line"><span class="comment"> *    前一部分元素中的最大值，以及划分后一部分元素中的最小值，才可能作为就是这两个数组的中位数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</span></span><br><span class="line"><span class="comment">        if (nums1.length &gt; nums2.length) &#123;</span></span><br><span class="line"><span class="comment">            return findMedianSortedArrays(nums2, nums1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int m = nums1.length;</span></span><br><span class="line"><span class="comment">        int n = nums2.length;</span></span><br><span class="line"><span class="comment">        int left = 0, right = m, ansi = -1;</span></span><br><span class="line"><span class="comment">        // median1：前一部分的最大值</span></span><br><span class="line"><span class="comment">        // median2：后一部分的最小值</span></span><br><span class="line"><span class="comment">        int median1 = 0, median2 = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        while (left &lt;= right) &#123;</span></span><br><span class="line"><span class="comment">            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]</span></span><br><span class="line"><span class="comment">            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]</span></span><br><span class="line"><span class="comment">            int i = (left + right) / 2;</span></span><br><span class="line"><span class="comment">            int j = (m + n + 1) / 2 - i;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]</span></span><br><span class="line"><span class="comment">            int nums_im1 = (i == 0 ? Integer.MIN_VALUE : nums1[i - 1]);</span></span><br><span class="line"><span class="comment">            int nums_i = (i == m ? Integer.MAX_VALUE : nums1[i]);</span></span><br><span class="line"><span class="comment">            int nums_jm1 = (j == 0 ? Integer.MIN_VALUE : nums2[j - 1]);</span></span><br><span class="line"><span class="comment">            int nums_j = (j == n ? Integer.MAX_VALUE : nums2[j]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if (nums_im1 &lt;= nums_j) &#123;</span></span><br><span class="line"><span class="comment">                ansi = i;</span></span><br><span class="line"><span class="comment">                median1 = Math.max(nums_im1, nums_jm1);</span></span><br><span class="line"><span class="comment">                median2 = Math.min(nums_i, nums_j);</span></span><br><span class="line"><span class="comment">                left = i + 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            else &#123;</span></span><br><span class="line"><span class="comment">                right = i - 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="分治算法" scheme="http://yoursite.com/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
      <category term="Hard" scheme="http://yoursite.com/tags/Hard/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-3 Longest SubString Without Repeating Characters</title>
    <link href="http://yoursite.com/2020/07/19/2020-07-19-LeetCode-3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://yoursite.com/2020/07/19/2020-07-19-LeetCode-3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2020-07-19T08:09:00.000Z</published>
    <updated>2020-07-19T10:12:04.058Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 1: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "abcabcbb"</span></span><br><span class="line"><span class="comment">//输出: 3 </span></span><br><span class="line"><span class="comment">//解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 2: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "bbbbb"</span></span><br><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="comment">//解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 示例 3: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 输入: "pwwkew"</span></span><br><span class="line"><span class="comment">//输出: 3</span></span><br><span class="line"><span class="comment">//解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span></span><br><span class="line"><span class="comment">//     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Related Topics 哈希表 双指针 字符串 Sliding Window </span></span><br><span class="line"><span class="comment">// 👍 3996 👎 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">package</span> leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestSubstringWithoutRepeatingCharacters</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> LongestSubstringWithoutRepeatingCharacters().<span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(</span><br><span class="line">                solution.lengthOfLongestSubstring(<span class="keyword">new</span> String(<span class="string">"abcabcbb"</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// HashSet, 用于判断字符是否存在过(重复)</span></span><br><span class="line">            Set&lt;Character&gt; charSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> rk = -<span class="number">1</span>, maxlength = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 左指针右移，移动一字符</span></span><br><span class="line">                    charSet.remove(s.charAt(i-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(rk+<span class="number">1</span>&lt;s.length() &amp;&amp; !charSet.contains(s.charAt(rk+<span class="number">1</span>)))&#123;</span><br><span class="line">                    <span class="comment">// 移动右指针</span></span><br><span class="line">                    charSet.add(s.charAt(rk+<span class="number">1</span>));</span><br><span class="line">                    rk += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// i-&gt;rk间为无重复字符子串</span></span><br><span class="line">                maxlength = Math.max(maxlength, rk-i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> maxlength;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution：滑动窗口</span></span><br><span class="line"><span class="comment"> * T: O()   S: O()</span></span><br><span class="line"><span class="comment"> * 1. 找出字符串中从每一个字符开始的，不包含重复字符的最长字串，那么其中最长的那个字符串就是结果.</span></span><br><span class="line"><span class="comment"> * 2. 以字符串abcabcbb为例:</span></span><br><span class="line"><span class="comment"> *     (a)bcabcbb -&gt; (abc)abcbb</span></span><br><span class="line"><span class="comment"> *     a(b)cabcbb -&gt; a(bca)bcbb</span></span><br><span class="line"><span class="comment"> *     ab(c)abcbb -&gt; ab(cab)cbb</span></span><br><span class="line"><span class="comment"> *     abc(a)bcbb -&gt; abc(abc)bb</span></span><br><span class="line"><span class="comment"> *     abca(b)cbb -&gt; abca(bc)bb</span></span><br><span class="line"><span class="comment"> *     abcab(c)bb -&gt; abcab(cb)b</span></span><br><span class="line"><span class="comment"> *     abcabc(b)b -&gt; abcabc(b)b</span></span><br><span class="line"><span class="comment"> *     abcabcb(b) -&gt; abcabcb(b)</span></span><br><span class="line"><span class="comment"> * 3. 可以发现规律: 在依次递增枚举字串的起始位置时，字串的结束位置也是在递增的.</span></span><br><span class="line"><span class="comment"> *    原因在于： 加入选取字符串第k个字符作为起始位置并得到了不包含重复字符的最长子串的结束位置为rk,那么选择第k+1个字符作为起始位置时，</span></span><br><span class="line"><span class="comment"> *              显然k+1-&gt;rk的字符是不重复的，因此可以继续增大rk，直到右侧出现了重复字符为止.</span></span><br><span class="line"><span class="comment"> * 参数：双指针(左指针: 枚举子串的起始为止；右指针: rk), Java HashSet(左指针右移，从HashSet中移除一字符；右指针右移，向HashSet添加一字符)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">    public int lengthOfLongestSubstring(String s) &#123;</span></span><br><span class="line"><span class="comment">        // HashSet, 用于判断字符是否存在过(重复)</span></span><br><span class="line"><span class="comment">        Set&lt;Character&gt; charSet = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">        int rk = -1, maxlength = 0;</span></span><br><span class="line"><span class="comment">        for(int i = 0; i&lt;s.length(); i++)&#123;</span></span><br><span class="line"><span class="comment">            if(i != 0)&#123;</span></span><br><span class="line"><span class="comment">                // 左指针右移，移动一字符</span></span><br><span class="line"><span class="comment">                charSet.remove(s.charAt(i-1));</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            while(rk+1&lt;s.length() &amp;&amp; !charSet.contains(s.charAt(rk+1)))&#123;</span></span><br><span class="line"><span class="comment">                // 移动右指针</span></span><br><span class="line"><span class="comment">                charSet.add(s.charAt(rk+1));</span></span><br><span class="line"><span class="comment">                rk += 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // i-&gt;rk间为无重复字符子串</span></span><br><span class="line"><span class="comment">            maxlength = Math.max(maxlength, rk-i+1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return maxlength;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="滑动窗口" scheme="http://yoursite.com/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="Medium" scheme="http://yoursite.com/tags/Medium/"/>
    
  </entry>
  
</feed>
