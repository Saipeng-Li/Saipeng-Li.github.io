<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少时入长安</title>
  
  <subtitle>FEARLESS ALONE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-03T13:08:42.561Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Guran</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫入门</title>
    <link href="http://yoursite.com/2020/02/03/2020-02-03-%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/02/03/2020-02-03-%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</id>
    <published>2020-02-03T06:55:00.000Z</published>
    <updated>2020-02-03T13:08:42.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫前"><a href="#爬虫前" class="headerlink" title="爬虫前"></a>爬虫前</h3><h4 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h4><p>互联网上的网站都是托管在服务器上24小时运行的。我们的<strong>爬虫</strong>首先会模拟请求，就好像人在浏览器输入网址，然后回车那样。爬虫可以利用一些Http库向指定的服务器发起请求，此时爬虫将自己“假装”成浏览器。大多数的服务器会以为浏览器发送的请求而直接返回数据给爬虫了。当然也有一些网站会建立一些反爬虫机制来实行反爬。</p><h4 id="在Chrome浏览器抓包"><a href="#在Chrome浏览器抓包" class="headerlink" title="在Chrome浏览器抓包"></a>在Chrome浏览器抓包</h4><h5 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h5><p>所谓抓包，就是来摸清浏览器的内部套路。知道请求方式、请求参数、请求头定义、怎么拿到返回的数据等。</p><p>在我们要对某个网站进行爬取的时候，要对其数据进行分析，就要知道应该<strong>怎么请求</strong>，就要知道<strong>获取的数据是什么样的</strong>。</p><p>首先打开<a href="https://www.baidu.com/，按下F12。如下：" target="_blank" rel="noopener">https://www.baidu.com/，按下F12。如下：</a></p><p><a href="https://imgchr.com/i/1wfmAf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/03/1wfmAf.md.png" alt="1wfmAf.md.png"></a></p><p>可以看到Element标签下对应的html代码，其实就是该网页的代码。</p><p>点击Network标签，刷新一下。可以看到有许多请求。如下：</p><p><a href="https://imgchr.com/i/1wIpqA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/03/1wIpqA.md.png" alt="1wIpqA.md.png"></a></p><p>其实，HTTP的请求方式有好多种:GET/POST/PUT/DELETE/HEAD/OPTIONS/TRACE，其中最常见的是GET和POST请求。</p><h5 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h5><p>接下来，搜索【说好不哭】，查看Network可以看到有许多请求。如下：</p><p><img src="https://s2.ax1x.com/2020/02/03/1w7PaR.png" alt="1w7PaR.png"></p><p>这些都是GET请求，随便点击一个请求进行查看。</p><p><img src="https://s2.ax1x.com/2020/02/03/1wHhng.png" alt="1wHhng.png"></p><p>注意到<strong>Request URL</strong>: <a href="https://www.baidu.com/s?wd=%E8%AF%B4%E5%A5%BD%E4%B8%8D%E5%93%AD&amp;rsv_spt=1&amp;rsv_iqid=0xb05816e7000b654c&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=13&amp;rsv_sug1=9&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;inputT=1809&amp;rsv_sug4=2140。其中网站后面的东西即为GET请求的参数。这些参数以key-value键值对的形式实现，如：wd=%E8%AF%B4%E5%A5%BD%E4%B8%8D%E5%93%AD。" target="_blank" rel="noopener">https://www.baidu.com/s?wd=%E8%AF%B4%E5%A5%BD%E4%B8%8D%E5%93%AD&amp;rsv_spt=1&amp;rsv_iqid=0xb05816e7000b654c&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=13&amp;rsv_sug1=9&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;inputT=1809&amp;rsv_sug4=2140。其中网站后面的东西即为GET请求的参数。这些参数以key-value键值对的形式实现，如：wd=%E8%AF%B4%E5%A5%BD%E4%B8%8D%E5%93%AD。</a></p><p>所以，在使用python写GET请求时，直接在URL后面加个？然后在其后添加参数值即可。如<a href="https://www.baidu.com/s?wd=说好不哭。得到的搜索结果是一样的。" target="_blank" rel="noopener">https://www.baidu.com/s?wd=说好不哭。得到的搜索结果是一样的。</a></p><p><img src="https://s2.ax1x.com/2020/02/03/1wL74A.png" alt="1wL74A.png"></p><p>wd=%E8%AF%B4%E5%A5%BD%E4%B8%8D%E5%93%AD是对汉字【说好不哭】的url编码。</p><blockquote><p>关于URL编码：<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2010/02/url_encoding.html</a></p></blockquote><h5 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h5><p>那么POST请求呢？我们在进行一些<strong>信息提交</strong>的时候，如注册、登录时，我们所做的就是POST请求。POST请求的参数不会直接放在URL上，而是会以Form表单的形式将数据提交给服务器。</p><p>如我们进行CSDN的登录，点击登录按钮后：</p><p><a href="https://imgchr.com/i/10pLmq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/03/10pLmq.md.png" alt="10pLmq.md.png"></a></p><p>可以看到GET请求把请求参数暴露在URL上，而POST请求的参数则放在request body里面，POST请求方式还对密码参数加密。所以相对比较安全。</p><h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><p>请求头，即Request Header。我们在进行HTTP请求的时候，除了提交一些参数之外，还定义一些HTTP请求的头部信息，如Accept、Host、cookie、User-Agent等等。这些参数也是我们在做爬虫时要用到的。通过这些信息可以“欺骗”服务器，告诉它我们是正规请求。</p><p><img src="https://s2.ax1x.com/2020/02/03/10ExSK.png" alt="10ExSK.png"></p><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><h6 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h6><p>比如我们遇到的404页面，服务器错误返回的502页面等。都是服务器的响应码。</p><p>一般服务器给我们返回200，代表我们请求成功。</p><h6 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h6><p>再来看Response Headers(响应头)，这个头则主要告诉我们数据以什么样的形式展现，告诉我们cookie的设置。</p><p><img src="https://s2.ax1x.com/2020/02/03/10eSVH.png" alt="10eSVH.png"></p><h6 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h6><p>其实就是服务器返回给我们的数据。点击Response标签即可看到相关的数据了。</p><p><img src="https://s2.ax1x.com/2020/02/03/10u0Wn.png" alt="10u0Wn.png"></p><p>这些是服务器返回给我们的HTML源代码。对于不同的请求，我们获取到的数据是不一样的，除了HTML的，也有JSON的、图片二进制数据等。可以针对不同情况来解析这些数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;爬虫前&quot;&gt;&lt;a href=&quot;#爬虫前&quot; class=&quot;headerlink&quot; title=&quot;爬虫前&quot;&gt;&lt;/a&gt;爬虫前&lt;/h3&gt;&lt;h4 id=&quot;什么是爬虫&quot;&gt;&lt;a href=&quot;#什么是爬虫&quot; class=&quot;headerlink&quot; title=&quot;什么是爬虫&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="http://yoursite.com/2020/01/14/2020-01-14-My-first-blog/"/>
    <id>http://yoursite.com/2020/01/14/2020-01-14-My-first-blog/</id>
    <published>2020-01-14T14:32:24.000Z</published>
    <updated>2020-01-29T14:52:01.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello world"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/categories/test/"/>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
